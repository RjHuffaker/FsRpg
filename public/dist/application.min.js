"use strict";var ApplicationConfiguration=function(){var applicationModuleName="fsrpg",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","btford.socket-io"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("builder"),ApplicationConfiguration.registerModule("campaigns"),ApplicationConfiguration.registerModule("cards"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("decks"),ApplicationConfiguration.registerModule("move"),ApplicationConfiguration.registerModule("narrator"),ApplicationConfiguration.registerModule("npcs"),ApplicationConfiguration.registerModule("pcs"),ApplicationConfiguration.registerModule("player"),ApplicationConfiguration.registerModule("users"),angular.module("core").factory("BuilderHub",["$rootScope","Bakery","DecksBread",function($rootScope,Bakery,DecksBread){var service={};return service.toggleCardLock=function(panel,cardList){for(var i=0;i<cardList.length;i++)panel===cardList[i]&&(cardList[i].locked=!cardList[i].locked)},service.findDependency=function(deck,resource){for(var index=-1,i=0;i<resource.dependencies.length;i++){var dependency=resource.dependencies[i];dependency._id===deck._id&&(index=i)}return index},service.toggleDependency=function(deck,resource){var deckIndex=service.findDependency(deck,resource);deckIndex>-1?resource.dependencies.splice(deckIndex,1):resource.dependencies.push(deck);for(var i=0;i<resource.dependencies.length;i++)DecksBread.browseAspects(resource.dependencies[i])},service.changeAspect=function(card,aspect){console.log(card),console.log(aspect),card.aspect!==aspect&&(card.aspect=aspect)},service}]),angular.module("campaigns").controller("CampaignsController",["$scope","Socket",function($scope,Socket){$scope.messages=[],$scope.users=[];var init=function(){$scope.name=window.user.username,$scope.messages.push({user:"",text:$scope.name+" has joined."}),Socket.emit("user:init",{name:window.user.username})};Socket.on("user:init",function(data){console.log(data);for(var message in data.messages)$scope.messages.push(message);for(var user in data.users)$scope.users.push(user)}),Socket.on("send:message",function(message){$scope.messages.push(message)}),Socket.on("user:join",function(data){$scope.messages.push({user:"",text:data.name+" has joined."}),$scope.users.push(data.name)}),Socket.on("user:left",function(data){$scope.messages.push({user:"chatroom",text:data.name+" has left."})}),$scope.messages=[],$scope.sendMessage=function(){$scope.message&&(Socket.emit("send:message",{user:$scope.name,text:$scope.message}),$scope.messages.push({user:$scope.name,text:$scope.message}),$scope.message="")},init()}]),angular.module("campaigns").factory("Campaigns",["$stateParams","$location","Authentication","$resource",function($stateParams,$location,Authentication,$resource){var Campaigns=$resource("campaigns/:campaignId",{campaignId:"@_id"},{update:{method:"PUT"}}),service={};return service.campaign={},service.campaignList=[],service.browseCampaigns=function(){this.campaignList=Campaigns.query(function(response){})},service.readCampaign=function(){this.campaign=Campaigns.get({campaignId:$stateParams.campaignId})},service.editCampaign=function(){var campaign=this.campaign;campaign.$update(function(){},function(errorResponse){this.error=errorResponse.data.message})},service.addCampaign=function(){this.campaign=new Campaigns({}),this.campaign.$save(function(response){$location.path("campaign/campaigns/"+response._id+"/edit")},function(errorResponse){this.error=errorResponse.data.message})},service.deleteCampaign=function(campaign){if(campaign){campaign.$remove();for(var i in this.campaigns)this.campaigns[i]===campaign&&this.campaigns.splice(i,1)}else this.campaign.$remove(function(){$location.path("campaign/campaigns")});this.browseCampaigns()},service}]),angular.module("cards").directive("cardForm",["$rootScope",function($rootScope){return{restrict:"A",require:"^form",link:function(scope,element,attr){scope.$on("Bakery: deckSaved",function(){scope.featureCardForm.$setPristine()})}}}]).directive("cardLogo",["$rootScope",function($rootScope){return{restrict:"A",templateUrl:"../modules/cards/views/card-logo.html"}}]).directive("cardHeader",function(){return{restrict:"A",templateUrl:"../modules/cards/views/card-header.html"}}).directive("cardDescription",function(){return{restrict:"A",templateUrl:"../modules/cards/views/card-description.html"}}).directive("cardModifiers",function(){return{restrict:"A",templateUrl:"../modules/cards/views/card-modifiers.html"}}).directive("cardBenefit",function(){return{restrict:"A",templateUrl:"../modules/cards/views/card-benefit.html"}}).directive("cardFooter",function(){return{restrict:"A",templateUrl:"../modules/cards/views/card-footer.html"}}).directive("cardAction",["DataSRVC",function(DataSRVC){return{restrict:"A",templateUrl:"../modules/cards/views/card-action.html",scope:{cardAction:"=",panel:"="},link:function(scope,element,attrs){scope.dataSRVC=DataSRVC}}}]).directive("cardActionIcon",function(){return{restrict:"A",templateUrl:"../modules/cards/views/card-action-icon.html"}}).directive("cardActionTitle",function(){return{restrict:"A",templateUrl:"../modules/cards/views/card-action-title.html"}}).directive("cardActionKeywords",function(){return{restrict:"A",templateUrl:"../modules/cards/views/card-action-keywords.html"}}).directive("cardActionPrompt",function(){return{restrict:"A",templateUrl:"../modules/cards/views/card-action-prompt.html"}}).directive("cardActionEffect",function(){return{restrict:"A",templateUrl:"../modules/cards/views/card-action-effect.html"}}).directive("cardActionAttack",function(){return{restrict:"A",templateUrl:"../modules/cards/views/card-action-attack.html"}}).directive("cardActionDefense",function(){return{restrict:"A",templateUrl:"../modules/cards/views/card-action-defense.html"}}).directive("originStats",function(){return{restrict:"A",templateUrl:"../modules/cards/views/origin-stats.html"}}).directive("originDefenses",function(){return{restrict:"A",templateUrl:"../modules/cards/views/origin-defenses.html"}}).directive("diceDropdown",function(){return{restrict:"A",templateUrl:"../modules/pcs/views/dice-dropdown.html",scope:{ability:"="}}}).directive("stopEvent",function(){return{restrict:"A",link:function(scope,element,attrs){var _pressEvents="touchstart mousedown";element.on(_pressEvents,function(event){scope.panel.x_overlap||scope.panel.y_overlap||event.stopPropagation()})}}}).directive("stopClick",function(){return{restrict:"A",link:function(scope,element,attrs){element.on("click",function(event){event.stopPropagation()})}}}).directive("elasticTextarea",["$timeout",function($timeout){return{restrict:"A",link:function(scope,element,attrs){var resizeArea=function(){setTimeout(function(){element[0].style.height=element[0].scrollHeight+"px"},25)};scope.$watch(function(){return element[0].scrollHeight},function(newValue,oldValue){newValue!==oldValue&&resizeArea()}),resizeArea()}}}]).directive("fitContent",function(){return{restrict:"A",scope:!1,link:function(scope,element,attrs){var reduceText=function(){setTimeout(function(){for(var fontSize=parseInt(element.css("font-size"));element[0].offsetHeight>element.parent()[0].offsetHeight&&fontSize>=6;)fontSize--,element.css("font-size",fontSize+"px")},25)};scope.$watch(function(){return element[0].offsetHeight},function(newValue,oldValue){newValue>oldValue&&reduceText()}),reduceText()}}}),angular.module("cards").directive("playerOptions",function(){return{restrict:"A",templateUrl:"../modules/player/views/options-player.html"}}).directive("pcSummary",function(){return{restrict:"A",templateUrl:"../modules/pcs/views/pc-summary.html"}}).directive("pcOptions",function(){return{restrict:"A",templateUrl:"../modules/pcs/views/pc-options.html"}}).directive("cardPc1",function(){return{restrict:"A",templateUrl:"../modules/pcs/views/card-pc-1.html"}}).directive("cardPc2",function(){return{restrict:"A",templateUrl:"../modules/pcs/views/card-pc-2.html"}}).directive("cardPc3",function(){return{restrict:"A",templateUrl:"../modules/pcs/views/card-pc-3.html"}}).directive("featureCard",["DataSRVC","Bakery","BuilderHub",function(DataSRVC,Bakery,BuilderHub){return{restrict:"A",templateUrl:"../modules/cards/views/feature-card.html",scope:{card:"=",panel:"="},link:function(scope,element,attrs){scope.Bakery=Bakery,scope.dataSRVC=DataSRVC,scope.BuilderHub=BuilderHub}}}]).directive("narratorOptions",function(){return{restrict:"A",templateUrl:"../modules/narrator/views/options-narrator.html"}}).directive("npcSummary",function(){return{restrict:"A",templateUrl:"../modules/npcs/views/npc-summary.html"}}).directive("npcOptions",function(){return{restrict:"A",templateUrl:"../modules/npcs/views/npc-options.html"}}).directive("npcOrigin",function(){return{restrict:"A",templateUrl:"../modules/npcs/views/npc-origin.html"}}).directive("builderOptions",function(){return{restrict:"A",templateUrl:"../modules/builder/views/options-builder.html"}}).directive("deckSummary",function(){return{restrict:"A",templateUrl:"../modules/decks/views/deck-summary.html"}}).directive("deckOptions",function(){return{restrict:"A",templateUrl:"../modules/decks/views/deck-options.html"}}).directive("campaignSummary",function(){return{restrict:"A",templateUrl:"../modules/campaigns/views/campaign-summary.html"}}).directive("campaignOptions",function(){return{restrict:"A",templateUrl:"../modules/campaigns/views/campaign-options.html"}}).directive("deckDemo",function(){return{restrict:"A",templateUrl:"../modules/core/views/deck-demo.html"}}),angular.module("cards").factory("Aspects",["$resource",function($resource){return $resource("aspect/:aspectId",{aspectId:"@_id"},{update:{method:"PUT"},list:{url:"/aspects",method:"GET",isArray:!0},query:{url:"/aspects/:deckId",method:"GET",isArray:!0,params:{deckId:"@_id"}}})}]),angular.module("cards").factory("Augments",["$resource",function($resource){return $resource("augments/:augmentId",{augmentId:"@_id"},{update:{method:"PUT"}})}]),angular.module("cards").factory("CardsBread",["$stateParams","$location","Authentication","$resource","$rootScope","Bakery","PanelUtils","DeckUtils","StackUtils",function($stateParams,$location,Authentication,$resource,$rootScope,Bakery,PanelUtils,DeckUtils,StackUtils){var service={},editDeck=function(deck,_loadDeck){var _deck=new Bakery.Decks(deck);_deck.$update(function(response){_loadDeck&&(Bakery.resource=response)},function(errorResponse){console.log(errorResponse)})};return service.browse=function(cardType,params,destination){var cardParams=PanelUtils.getCardParams(params);Bakery.getCardResource(cardType).query(cardParams,function(response){return response})},service.read=function(panel,callback){var params=PanelUtils.getCardParams(panel);Bakery.getCardResource(panel.panelType).get(params,function(response){callback(panel,response)})},service.edit=function(panel){var cardResource=Bakery.getNewCardResource(panel);if("Aspect"!==panel.panelType){var panelData=PanelUtils.getPanelData(panel);panelData.aspect&&(cardResource.aspect=panelData.aspect._id)}cardResource.$update()},service.add=function(resource,cardType,cardNumber,deckShift,deckSave){var card={deck:resource._id,deckSize:resource.deckSize,deckName:resource.name,cardNumber:cardNumber,cardType:cardType},panel={panelType:cardType,x_coord:15*cardNumber,y_coord:0};PanelUtils.setPanelData(panel,card);var cardResource=Bakery.getNewCardResource(panel);cardResource.$save(function(response){PanelUtils.setPanelData(panel,response),resource.cardList.push(panel),DeckUtils.setDeckSize(Bakery.resource)}).then(function(response){deckShift&&DeckUtils.expandDeck(Bakery.resource.cardList,panel)}).then(function(response){deckSave&&editDeck(resource,!0)})},service["delete"]=function(resource,panel){if("architectOptions"!==panel.panelType){var cardResource=Bakery.getNewCardResource(panel);cardResource.$remove(function(response){resource&&PanelUtils.removePanel(resource.cardList,panel)}).then(function(response){resource&&DeckUtils.setDeckSize(resource)}).then(function(response){resource&&DeckUtils.collapseDeck(resource.cardList,panel)}).then(function(response){resource&&editDeck(resource,!1)})}},service}]),angular.module("cards").factory("Feats",["$resource",function($resource){return $resource("feats/:featId",{featId:"@_id"},{update:{method:"PUT"}})}]),angular.module("cards").factory("Items",["$resource",function($resource){return $resource("items/:itemId",{itemId:"@_id"},{update:{method:"PUT"}})}]),angular.module("cards").factory("Origins",["$resource",function($resource){return $resource("origins/:originId",{originId:"@_id"},{update:{method:"PUT"}})}]),angular.module("cards").factory("Traits",["$resource",function($resource){return $resource("traits/:traitId",{traitId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("CoreController",["$location","$scope","$rootScope","$window","Authentication","Bakery","CardsBread","DecksBread","PcsBread","DataSRVC","PcsTraits","PcsFeats","PcsAugments","PcsItems","BuilderHub","PlayerHub","CoreVars","DeckUtils","shuffleDeck",function($location,$scope,$rootScope,$window,Authentication,Bakery,CardsBread,DecksBread,PcsBread,DataSRVC,PcsTraits,PcsFeats,PcsAugments,PcsItems,BuilderHub,PlayerHub,CoreVars,DeckUtils,shuffleDeck){$scope.authentication=Authentication,$scope.Bakery=Bakery,$scope.dataSRVC=DataSRVC,$scope.pcsTraits=PcsTraits,$scope.pcsFeats=PcsFeats,$scope.pcsAugments=PcsAugments,$scope.pcsItems=PcsItems,$scope.BuilderHub=BuilderHub,$scope.PlayerHub=PlayerHub,$scope.CoreVars=CoreVars;var pcNew=!1,initialize=function(){toggleListeners(!0)},toggleListeners=function(enable){enable&&($scope.$on("$destroy",onDestroy),$scope.$on("ability:onPress",PlayerHub.chooseAbility),$scope.$watch("CoreVars.EXP",PlayerHub.watchEXP),$scope.$watch("Bakery.resource.experience",PlayerHub.watchExperience),$scope.$watch("Bakery.resource.level",PlayerHub.watchLevel))},onDestroy=function(){toggleListeners(!1)};$scope.browsePcs=function(){PcsBread.browse()},$scope.browseDecks=function(param){DecksBread.browse(param)},$scope.readCard=function(card){CardsBread.read(card,CardsBread.setPanelData)},$scope.readDeck=function(deck){DecksBread.read(deck)},$scope.readPc=function(pc){PcsBread.read(pc),pcNew=!1},$scope.addCard=function(deck,cardType,cardNumber,deckShift,deckSave){CardsBread.add(deck,cardType,cardNumber,deckShift,deckSave)},$scope.addDeck=function(type,size){DecksBread.add(type,size)},$scope.addPc=function(){PcsBread.add(),pcNew=!0},$scope.editCard=function(card){CardsBread.edit(card)},$scope.editDeck=function(deck){DecksBread.edit(deck)},$scope.editPc=function(pc){PcsBread.edit(pc),pcNew=!1},$scope.deleteCard=function(panel){CardsBread["delete"](Bakery.resource,panel)},$scope.deleteDeck=function(deck){DecksBread["delete"](Bakery.resource,deck)},$scope.deletePc=function(pc){PcsBread["delete"](Bakery.resource,pc)},$scope.exitPc=function(pc){pcNew&&PcsBread["delete"](Bakery.resource,pc),$scope.browsePcs()},$scope.shuffleDeck=function(cardList){shuffleDeck(cardList)},$scope.changeFeatureCard=function(card){$scope.modalShown=!0,$scope.modalDeckShown=!0,PcsTraits.browseCards()},$scope.status={isopen:!1},$scope.toggled=function(open){$scope.status.isopen=open,$rootScope.$broadcast("CardsCtrl:onDropdown",{isOpen:$scope.status.isopen})},initialize()}]),angular.module("core").controller("HeaderController",["$document","$rootScope","$scope","Authentication","Menus","CardsBread","DecksBread","PcsBread",function($document,$rootScope,$scope,Authentication,Menus,CardsBread,DecksBread,PcsBread){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.browseDecks=function(param){DecksBread.browse(param),$scope.isCollapsed=!1},$scope.browseCampaigns=function(){console.log("stub")},$scope.browsePcs=function(){PcsBread.browse(),$scope.isCollapsed=!1},$scope.browseNpcs=function(){console.log("stub")}}]),angular.module("core").directive("modalDialogWindow",function(){return{restrict:"E",scope:{show:"="},transclude:!0,templateUrl:"../modules/core/views/modal-window.html",link:function(scope,element,attrs){scope.dialogStyle={},attrs.width&&(scope.dialogStyle.width=attrs.width),attrs.height&&(scope.dialogStyle.height=attrs.height),scope.hideModal=function(){scope.show=!1}}}});var coreModule=angular.module("core");coreModule.directive("screenSize",["$rootScope","$window",function($rootScope,$window){return{restrict:"A",link:function(scope,element,attrs){var _windowHeight,_window=angular.element($window),initialize=function(){toggleListeners(!0),setTimeout(function(){onHeightChange()},0)},toggleListeners=function(enable){enable&&(scope.$on("$destroy",onDestroy),_window.on("resize",onHeightChange))},onDestroy=function(enable){toggleListeners(!1)},onHeightChange=function(){_windowHeight=_window.height(),$rootScope.$broadcast("screenSize:onHeightChange",{newHeight:_windowHeight})};angular.element(document).ready(function(){initialize()}),initialize()}}}]),angular.module("core").factory("Bakery",["$stateParams","$location","Authentication","$resource","$rootScope","Decks","StackUtils","PanelUtils","demoDeck","Pcs","Aspects","Traits","Feats","Augments","Items","Origins",function($stateParams,$location,Authentication,$resource,$rootScope,Decks,StackUtils,PanelUtils,demoDeck,Pcs,Aspects,Traits,Feats,Augments,Items,Origins){var service={};return service.Decks=Decks,service.Pcs=Pcs,service.Aspects=Aspects,service.Traits=Traits,service.Feats=Feats,service.Augments=Augments,service.Items=Items,service.Origins=Origins,service.resource=demoDeck,service.getCardResource=function(cardType){switch(cardType){case"Aspect":return service.Aspects;case"Trait":return service.Traits;case"Feat":return service.Feats;case"Augment":return service.Augments;case"Item":return service.Items;case"Origin":return service.Origins;default:return!1}},service.getNewCardResource=function(panel){switch(panel.panelType){case"Aspect":return new service.Aspects(panel.aspectData);case"Trait":return new service.Traits(panel.traitData);case"Feat":return new service.Feats(panel.featData);case"Augment":return new service.Augments(panel.augmentData);case"Item":return new service.Items(panel.itemData);case"Origin":return new service.Origins(panel.originData);default:return!1}},service}]),angular.module("core").factory("CoreVars",["$rootScope",function($rootScope){var service={};service.windowHeight=0,service.experience=0,service.x_dim_em=15,service.y_dim_em=21,service.x_tab_em=3,service.y_tab_em=3,service.x_cover_em=12,service.y_cover_em=18,service.x_dim_px=240,service.y_dim_px=336,service.x_tab_px=48,service.y_tab_px=48,service.x_cover_px=144,service.y_cover_px=192,service.cardMoved=!1,service.cardMoving=!1;var moveTimer;return service.modalShown=!1,service.diceBoxShown=!1,service.modalDeckShown=!1,$rootScope.$on("screenSize:onHeightChange",function(event,object){service.windowHeight=object.newHeight}),service.setCardMoving=function(){clearTimeout(moveTimer),service.cardMoving=!0,service.cardMoved=!0,moveTimer=setTimeout(function(){service.cardMoving=!1,$rootScope.$broadcast("CoreVars:getDeckWidth")},800)},service.hideModal=function(){service.modalShown=!1,service.diceBoxShown=!1,service.modalDeckShown=!1},service}]),angular.module("core").factory("DataSRVC",[function($rootScope){var service={};return service.sexArray=["---","Male","Female"],service.diceList=[{order:1,name:"d__",sides:0,image:"modules/core/img/d___.png"},{order:2,name:"d4",sides:4,image:"modules/core/img/d_04.png"},{order:3,name:"d6",sides:6,image:"modules/core/img/d_06.png"},{order:4,name:"d6",sides:6,image:"modules/core/img/d_06.png"},{order:5,name:"d8",sides:8,image:"modules/core/img/d_08.png"},{order:6,name:"d8",sides:8,image:"modules/core/img/d_08.png"},{order:7,name:"d10",sides:10,image:"modules/core/img/d_10.png"},{order:8,name:"d10",sides:10,image:"modules/core/img/d_10.png"},{order:9,name:"d12",sides:12,image:"modules/core/img/d_12.png"}],service.aspectTypes=["Archetype","Allegiance","Race"],service.targetTypes=["Utility","Close","Close Area","Distant","Distant Area"],service.closeDetails=["1/1","1/2","1/3","1/4","2/1","2/2","2/3","2/4","3/1","3/2","3/3","3/4","4/1","4/2","4/3"],service.closeAreaDetails=["2x2","3x3","4x4","5x5"],service.distantDetails=["4/1","6/1","8/1","10/1","12/1","14/1","16/1","18/1","20/1","22/1","24/1"],service.distantAreaDetails=["8/2x2","10/2x2","12/2x2","16/2x2","10/3x3","12/3x3","16/3x3","20/3x3","12/4x4","16/4x4","20/4x4"],service.actionKeywords=["Default","Single-use","Thrown","Reflexive","Melee","Ranged","Evocation","Invocation"],service.actionFrequency=["Free","Count: 1","Count: 2","Count: 3","Count: 4","Count: 5","Disruptive","Responsive"],service.dice=["1d4","1d6","1d8","1d10","1d12"],service.abilities=["STR","PHY","FLE","DEX","ACU","INT","WIS","CHA"],service.attackTypes=["Melee","Ranged","Evocation","Invocation"],service.defenseTypes=["Block","Dodge","Alertness","Tenacity"],service.prerequisites=["1d10 STR","1d10 PHY","1d10 FLE","1d10 DEX","1d10 ACU","1d10 INT","1d10 WIS","1d10 CHA"],service.itemTypes=["Melee","Melee / Ranged","Melee / Invocation","Ranged","Ranged / Melee","Ranged / Evocation","Evocation","Evocation / Invocation","Evocation / Ranged","Invocation","Invocation / Evocation","Invocation / Melee"],service.itemSlots=["One-handed","Two-handed","One-handed or Paired","One-handed or Two-handed","Armor","Shield","Gloves","Boots","Cloak","Amulet","Ring","Belt","Helmet","Consumable","Provision"],service}]),angular.module("core").factory("demoDeck",["StackUtils","PanelUtils",function(StackUtils,PanelUtils){return{dependencies:[],deckType:"",deckSize:3,cardList:[{_id:"demoCard1",panelType:"deckDemo",x_coord:0,y_coord:0,content:"Here is a basic demonstration of a card-deck layout. While additional features may be accessed via the menu bar, this simple demo serves to show how card-objects may be manipulated by the user in much the same way as a physical deck of cards."},{_id:"demoCard2",panelType:"deckDemo",x_coord:15,y_coord:0,aboveId:"demoCard3",content:"Note that the content of each card may vary, and has no relation whatsoever to its actual position. Click again to cover it back up."},{_id:"demoCard3",panelType:"deckDemo",x_coord:15,y_coord:3,belowId:"demoCard2",content:"Cards may be stacked vertically. Click on an covered card to uncover it."},{_id:"demoCard4",panelType:"deckDemo",x_coord:30,y_coord:0,rightId:"demoCard5",content:"Cards can also be stacked horizontally, but only if they are not already stacked vertically."},{_id:"demoCard5",panelType:"deckDemo",x_coord:33,y_coord:0,leftId:"demoCard4",content:"Both vertical and horizontal stacks may be reordered as a single entity."},{_id:"demoCard6",panelType:"deckDemo",x_coord:48,y_coord:0,content:"The content of each card can also be modified by the user (TODO: add input field)."},{_id:"demoCard7",panelType:"deckDemo",x_coord:63,y_coord:0,content:"More coming soon!"}]}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("mockDataBuilder",function(){var service={};return service.newMockData=function(){var mockData={};return mockData.aspect_1={panelType:"Aspect",aspectData:{name:"Aspect the First",cardType:"Aspect",cardNumber:1}},mockData.aspect_2={panelType:"Aspect",aspectData:{name:"Aspect the Second",cardType:"Aspect",cardNumber:2}},mockData.aspect_3={panelType:"Aspect",aspectData:{name:"Aspect the Third",cardType:"Aspect",cardNumber:3}},mockData.aspect_4={panelType:"Aspect",aspectData:{name:"Aspect the Fourth",cardType:"Aspect",cardNumber:4}},mockData.aspect_5={panelType:"Aspect",aspectData:{name:"Aspect the Fifth",cardType:"Aspect",cardNumber:5}},mockData.aspect_6={panelType:"Aspect",aspectData:{name:"Aspect the Sixth",cardType:"Aspect",cardNumber:6}},mockData.aspect_7={panelType:"Aspect",aspectData:{name:"Aspect the Seventh",cardType:"Aspect",cardNumber:7}},mockData.aspect_8={panelType:"Aspect",aspectData:{name:"Aspect the Eighth",cardType:"Aspect",cardNumber:8}},mockData.aspectDeck={_id:"aspectDeck_id",dependencies:[],cardList:[mockData.aspect_1,mockData.aspect_2,mockData.aspect_3,mockData.aspect_4,mockData.aspect_5,mockData.aspect_6,mockData.aspect_7,mockData.aspect_8]},mockData.trait_1={panelType:"Trait",traitData:{name:"Trait the First",cardType:"Trait",cardNumber:1}},mockData.trait_2={panelType:"Trait",traitData:{name:"Trait the Second",cardType:"Trait",cardNumber:2}},mockData.trait_3={panelType:"Trait",traitData:{name:"Trait the Third",cardType:"Trait",cardNumber:3}},mockData.trait_4={panelType:"Trait",traitData:{name:"Trait the Fourth",cardType:"Trait",cardNumber:4}},mockData.traitDeck={_id:"traitDeck_id",dependencies:[{_id:"aspectDeck_id"}],cardList:[mockData.trait_1,mockData.trait_2,mockData.trait_3,mockData.trait_4]},mockData.feat_1={panelType:"Feat",x_coord:0,y_coord:0,featData:{name:"Feat the First",cardType:"Feat",cardNumber:1}},mockData.feat_2={panelType:"Feat",x_coord:15,y_coord:0,featData:{name:"Feat the Second",cardType:"Feat",cardNumber:2}},mockData.feat_3={panelType:"Feat",x_coord:15,y_coord:3,featData:{name:"Feat the Third",cardType:"Feat",cardNumber:3}},mockData.feat_4={panelType:"Feat",x_coord:30,y_coord:0,featData:{name:"Feat the Fourth",cardType:"Feat",cardNumber:4}},mockData.feat_5={panelType:"Feat",x_coord:30,y_coord:3,featData:{name:"Feat the Fifth",cardType:"Feat",cardNumber:5}},mockData.feat_6={panelType:"Feat",x_coord:30,y_coord:6,featData:{name:"Feat the Sixth",cardType:"Feat",cardNumber:6}},mockData.feat_7={panelType:"Feat",x_coord:45,y_coord:0,featData:{name:"Feat the Seventh",cardType:"Feat",cardNumber:7}},mockData.feat_8={panelType:"Feat",x_coord:45,y_coord:3,featData:{name:"Feat the Eighth",cardType:"Feat",cardNumber:8}},mockData.feat_9={panelType:"Feat",x_coord:45,y_coord:6,featData:{name:"Feat the Ninth",cardType:"Feat",cardNumber:9}},mockData.feat_10={panelType:"Feat",x_coord:45,y_coord:9,featData:{name:"Feat the Tenth",cardType:"Feat",cardNumber:10}},mockData.featDeck={_id:"featDeck_id",dependencies:[],cardList:[mockData.feat_1,mockData.feat_2,mockData.feat_3,mockData.feat_4,mockData.feat_5,mockData.feat_6,mockData.feat_7,mockData.feat_8,mockData.feat_9,mockData.feat_10]},mockData},service}),angular.module("core").factory("Socket",["socketFactory",function(socketFactory){var mSocket=socketFactory({ioSocket:socket});return mSocket}]),angular.module("decks").factory("DecksBread",["$stateParams","$location","Authentication","$resource","$rootScope","Bakery","PanelUtils","DeckUtils","StackUtils","CardsBread",function($stateParams,$location,Authentication,$resource,$rootScope,Bakery,PanelUtils,DeckUtils,StackUtils,CardsBread){var service={};return service.browseAspects=function(deck){Bakery.resource.archetypeList=[],Bakery.resource.allegianceList=[],Bakery.resource.raceList=[],Bakery.Aspects.query({deckId:deck._id},function(response){for(var i=0;i<response.length;i++)"Archetype"===response[i].aspectType?Bakery.resource.archetypeList.push(response[i]):"Allegiance"===response[i].aspectType?Bakery.resource.allegianceList.push(response[i]):"Race"===response[i].aspectType&&Bakery.resource.raceList.push(response[i])})},service.browseDependencies=function(){Bakery.Decks.query({deckType:"Aspect"},function(response){Bakery.dependencyDecks=response})},service.browse=function(param){Bakery.resource={},param?Bakery.Decks.query(param,function(response){response.unshift({_id:"builderOptionsId",panelType:"builderOptions"}),Bakery.resource.cardList=response,DeckUtils.setCardList(Bakery.resource.cardList)}):Bakery.Decks.list(function(response){response.unshift({_id:"builderOptionsId",panelType:"builderOptions"}),Bakery.resource.cardList=response,DeckUtils.setCardList(Bakery.resource.cardList)})},service.read=function(deck){Bakery.Decks.get({deckId:deck._id},function(response){if(Bakery.resource=response,"Aspect"!==response.deckType){service.browseDependencies();for(var i=0;i<response.dependencies.length;i++)service.browseAspects(response.dependencies[i])}})},service.edit=function(deck,_editCards,_loadDeck){var _deck=new Bakery.Decks(deck);
_deck.$update(function(response){if(_editCards){for(var i=0;i<deck.cardList.length;i++){var panel=deck.cardList[i];CardsBread.edit(panel)}$rootScope.$broadcast("Bakery: deckSaved")}_loadDeck&&(service.resource=response)},function(errorResponse){console.log(errorResponse)})},service.add=function(type,size){var deck=new Bakery.Decks({name:type+" Deck",deckType:type,deckSize:size,cardList:[{_id:"deckOptionsId",panelType:"deckOptions",x_coord:0,y_coord:0}]});deck.$save(function(response){for(var i=0;size>i;i++)CardsBread.add(deck,type,i+1,!1,i+1===size);"Aspect"!==type&&service.browseDependencies()})},service["delete"]=function(resource,deck){var _deck_x=deck.x_coord,_deck_y=deck.y_coord;deck.$remove(function(response){resource&&PanelUtils.removePanel(resource.cardList,deck)}).then(function(response){resource&&DeckUtils.setDeckSize(resource)}).then(function(response){resource&&DeckUtils.collapseDeck(resource.cardList,{x_coord:_deck_x,y_coord:_deck_y})})},service}]),angular.module("decks").factory("Decks",["$resource",function($resource){return $resource("deck/:deckId",{deckId:"@_id"},{update:{method:"PUT"},list:{url:"/decks",method:"GET",isArray:!0},query:{url:"/decks/:deckType",method:"GET",isArray:!0,params:{deckType:"deckType"}}})}]),angular.module("move").directive("cardPanel",["$document","$parse","$rootScope","$window","MoveHub","Bakery","CoreVars","checkEdge","onCardMove","PanelUtils","StackUtils","DeckUtils",function($document,$parse,$rootScope,$window,MoveHub,Bakery,CoreVars,checkEdge,onCardMove,PanelUtils,StackUtils,DeckUtils){return{restrict:"A",templateUrl:"../modules/core/views/card-panel.html",link:function(scope,element,attrs){Array.min=function(array){return Math.min.apply(Math,array)};var _startX,_startY,_mouseX,_mouseY,_moveX,_moveY,_panelX,_panelY,_startCol,_mouseCol,_startRow,_mouseRow,_moveTimer,_dropdownOpen=!1,_panel=$parse(attrs.panel)||null,_hasTouch="ontouchstart"in window,_pressEvents="touchstart mousedown",_moveEvents="touchmove mousemove",_releaseEvents="touchend mouseup",_pressTimer=null,initialize=function(){element.attr("draggable","false"),toggleListeners(!0),$document.ready(function(){onHeightChange()})},toggleListeners=function(enable){enable&&(scope.$on("$destroy",onDestroy),scope.$watch(attrs.panel,onCardChange),scope.$on("screenSize:onHeightChange",onHeightChange),scope.$on("cardPanel:onPressCard",onPressCard),scope.$on("cardPanel:onMoveCard",onMoveCard),scope.$on("cardPanel:onReleaseCard",onReleaseCard),scope.$on("deckStack:onMouseLeave",onMouseLeave),scope.$on("CardsCtrl:onDropdown",onDropdown),scope.$watch("panel.x_coord",resetPosition),scope.$watch("panel.y_coord",resetPosition),element.on(_pressEvents,onPress),_hasTouch||"img"!==element[0].nodeName.toLowerCase()||element.on("mousedown",function(){return!1}))},onDestroy=function(enable){toggleListeners(!1)},onCardChange=function(newVal,oldVal){_panel=newVal,element.css({top:"0",left:"-21em"}),setTimeout(function(){setPosition()},0)},onDropdown=function(event,object){_dropdownOpen=object.isOpen},getElementFontSize=function(){return parseFloat($window.getComputedStyle(element[0],null).getPropertyValue("font-size"))},convertEm=function(value){return value*getElementFontSize()},onHeightChange=function(event,object){CoreVars.x_dim_px=convertEm(15),CoreVars.y_dim_px=convertEm(21),CoreVars.x_tab_px=convertEm(3),CoreVars.y_tab_px=convertEm(3),CoreVars.x_cover_px=convertEm(12),CoreVars.y_cover_px=convertEm(18),setPosition()},resetPosition=function(newVal,oldVal){element.hasClass("card-moving")&&setPosition()},setPosition=function(){element.css({top:_panel.y_coord+"em",left:_panel.x_coord+"em"})},onPress=function(event){_dropdownOpen?$document.triggerHandler("click"):_hasTouch?(cancelPress(),_pressTimer=setTimeout(function(){cancelPress(),onLongPress(event)},100),$document.on(_moveEvents,cancelPress),$document.on(_releaseEvents,cancelPress)):_hasTouch||onLongPress(event)},cancelPress=function(){clearTimeout(_pressTimer),$document.off(_moveEvents,cancelPress),$document.off(_releaseEvents,cancelPress)},onLongPress=function(event){_startX=event.pageX||event.touches[0].pageX,_startY=event.pageY||event.touches[0].pageY,_moveX=0,_moveY=0,$document.on(_moveEvents,onMove),$document.on(_releaseEvents,onRelease),element.removeClass("card-moving"),StackUtils.setStack(Bakery.resource.cardList,_panel,function(stackArray){for(var i=0;i<stackArray.length;i++)stackArray[i].dragging=!0}),$rootScope.$broadcast("cardPanel:onPressCard",{startX:_startX,startY:_startY,panel:_panel})},onPressCard=function(event,object){_startCol=convertEm(_panel.x_coord),_startRow=convertEm(_panel.y_coord),_panel.dragging||element.addClass("card-moving")},onMove=function(event){event.preventDefault(),_mouseX=event.pageX||event.touches[0].pageX,_mouseY=event.pageY||event.touches[0].pageY,_mouseCol=convertEm(_panel.x_coord),_mouseRow=convertEm(_panel.y_coord),_moveX=_mouseX-_startX,_moveY=_mouseY-_startY,_panelX=_moveX+_startCol-(_startCol-_mouseCol),_panelY=_moveY+_startRow-(_startRow-_mouseRow),$rootScope.$broadcast("cardPanel:onMoveCard",{mouseX:_mouseX,mouseY:_mouseY,moveX:_moveX,moveY:_moveY,panelX:_panelX,panelY:_panelY,panel:_panel})},onMoveCard=function(event,object){object.slot=_panel,object.offset=element.offset(),element.hasClass("card-moving")?onCardMove(object):element.css({left:object.moveX+_startCol+"px",top:object.moveY+_startRow+"px"})},onRelease=function(){$document.off(_moveEvents,onMove),$document.off(_releaseEvents,onRelease),$rootScope.$broadcast("cardPanel:onReleaseCard",{panel:_panel}),_moveX<=convertEm(1)&&_moveX>=-convertEm(1)&&_moveY<=convertEm(1)&&_moveY>=-convertEm(1)&&MoveHub.triggerOverlap(_panel),CoreVars.cardMoved=!1;for(var _deck=Bakery.resource.cardList,i=0;i<_deck.length;i++)_deck[i].dragging=!1},onReleaseCard=function(event,object){element.addClass("card-moving"),setTimeout(function(){setPosition()},0),clearTimeout(_moveTimer),_moveTimer=setTimeout(function(){element.removeClass("card-moving")},600)},onMouseLeave=function(){$document.off(_moveEvents,onMove),$document.off(_releaseEvents,onRelease),$rootScope.$broadcast("cardPanel:onReleaseCard",{panel:_panel})};initialize()}}}]),angular.module("move").directive("deckStack",["$rootScope","$window","Bakery","StackUtils","DeckUtils","MoveHub",function($rootScope,$window,Bakery,StackUtils,DeckUtils,MoveHub){return{restrict:"A",link:function(scope,element,attrs){var pressed=!1,initialize=function(){toggleListeners(!0)},toggleListeners=function(enable){enable&&(scope.$on("$destroy",onDestroy),element.on("mouseleave",onMouseLeave),scope.$on("screenSize:onHeightChange",onHeightChange),scope.$on("DeckUtils:setDeckWidth",setDeckWidth),scope.$on("cardPanel:onPressCard",onPress),scope.$on("cardPanel:onReleaseCard",onRelease),scope.$on("cardPanel:onMoveCard",onMoveCard))},onDestroy=function(enable){toggleListeners(!1)},onHeightChange=function(event,object){var windowHeight=object.newHeight-50;element.css({height:windowHeight+"px"})},setDeckWidth=function(){var deckWidth=DeckUtils.getDeckWidth(Bakery.resource.cardList);element.css({width:deckWidth+"em"})},getElementFontSize=function(){return parseFloat($window.getComputedStyle(element[0],null).getPropertyValue("font-size"))},convertEm=function(value){return value*getElementFontSize()},onPress=function(){pressed=!0},onRelease=function(){pressed=!1},onMoveCard=function(event,object){var deckOffset=element.offset(),deckWidth=DeckUtils.getDeckWidth(Bakery.resource.cardList),deckLeftEdge=deckOffset.left,deckRightEdge=convertEm(deckWidth+3);object.mouseX<=deckLeftEdge?MoveHub.unstackLeft(object.panel):object.mouseX>=deckRightEdge&&MoveHub.unstackRight(object.panel)},onMouseLeave=function(event){pressed&&$rootScope.$broadcast("deckStack:onMouseLeave")};initialize()}}}]),angular.module("move").factory("checkEdge",["CoreVars",function(CoreVars){var service={};return service.crossing=function(panel,slotX,slotY,mouseX,mouseY){var leftEdge=panel.x_overlap?slotX+CoreVars.x_cover_px:slotX,rightEdge=slotX+CoreVars.x_dim_px,topEdge=slotY,bottomEdge=panel.y_overlap?slotY+CoreVars.y_tab_px:slotY+CoreVars.y_dim_px;if(mouseX>=leftEdge&&rightEdge>=mouseX&&mouseY>=topEdge&&bottomEdge>=mouseY){var left=mouseX-leftEdge,right=rightEdge-mouseX,top=mouseY-topEdge,bottom=bottomEdge-mouseY,edges=[left,right,top,bottom],closestEdge=Math.min.apply(Math.min,edges),edgeNames=["left","right","top","bottom"],edgeName=edgeNames[edges.indexOf(closestEdge)];return edgeName}return!1},service}]),angular.module("move").factory("DeckUtils",["$rootScope","PanelUtils",function($rootScope,PanelUtils){var service={};return service.getRefArray=function(cardList){for(var _cardList=[],i=0;i<cardList.length;i++)_cardList.push(i);return _cardList.sort(function(a,b){100*cardList[a].x_coord+cardList[a].y_coord,100*cardList[b].x_coord+cardList[b].y_coord;return 100*cardList[a].x_coord+cardList[a].y_coord-(100*cardList[b].x_coord+cardList[b].y_coord)}),_cardList},service.getRefIndex=function(cardList,panel){for(var _panel=0,i=0;i<cardList.length;i++)cardList[i].x_coord===panel.x_coord&&cardList[i].y_coord===panel.y_coord&&(_panel=i);return _panel},service.setCardList=function(cardList){for(var i=0;i<cardList.length;i++)cardList[i].x_coord=15*i,cardList[i].y_coord=0,cardList[i].dragging=!1,cardList[i].locked=!1;$rootScope.$broadcast("cardPanel:onReleaseCard")},service.expandDeck=function(cardList,panel){for(var panel_x_coord=panel.x_coord,i=(panel.y_coord,0);i<cardList.length;i++){var slot=cardList[i],slotData=PanelUtils.getPanelData(slot);slot!==panel&&slot.x_coord>=panel_x_coord&&(slot.x_coord+=15,slotData.cardNumber++)}$rootScope.$broadcast("cardPanel:onReleaseCard")},service.collapseDeck=function(cardList,panel){for(var i=0;i<cardList.length;i++){var slot=cardList[i],slotData=PanelUtils.getPanelData(slot);slot.x_coord>panel.x_coord&&(slot.x_coord-=15,slotData&&slotData.cardNumber--)}$rootScope.$broadcast("cardPanel:onReleaseCard")},service.setDeckSize=function(resource){var _length=resource.cardList.length-1;resource.deckSize=_length;for(var i=0;i<resource.cardList.length;i++){var panel=resource.cardList[i],panelData=PanelUtils.getPanelData(panel);panelData.deckSize=_length}},service.getDeckWidth=function(cardList){var lastPanel=PanelUtils.getLastPanel(cardList);return lastPanel.panel.x_coord+15},service.setDeckWidth=function(cardList){var _deckWidth=service.getDeckWidth(cardList);$rootScope.$broadcast("DeckUtils:setDeckWidth",{deckWidth:_deckWidth})},service}]),angular.module("move").factory("MoveHub",["$rootScope","CoreVars","Bakery","PanelUtils","DeckUtils","StackUtils","switchHorizontal","switchVertical","stackOver","stackUnder","unstackCard","toggleOverlap",function($rootScope,CoreVars,Bakery,PanelUtils,DeckUtils,StackUtils,switchHorizontal,switchVertical,stackOver,stackUnder,unstackCard,toggleOverlap){var service={};$rootScope.$on("CoreVars:getDeckWidth",DeckUtils.setDeckWidth(Bakery.resource.cardList));var getCardList=function(){return Bakery.resource.cardList};return service.triggerOverlap=function(panel){if(!CoreVars.cardMoved){var _deck=getCardList();toggleOverlap(_deck,panel)}},service.moveHorizontal=function(slot,panel){{var _deck=getCardList();PanelUtils.getLowestPanel(_deck,panel.x_coord).index}console.log("switchHorizontal"),switchHorizontal(_deck,slot,panel)},service.moveDiagonalUp=function(slot,panel){{var _deck=getCardList();PanelUtils.getLowestPanel(_deck,panel.x_coord).index}0===panel.y_coord?stackUnder(_deck,slot,panel):unstackCard(_deck,slot,panel)},service.moveDiagonalDown=function(slot,panel){{var _deck=getCardList();PanelUtils.getLowestPanel(_deck,panel.x_coord).index}0===panel.y_coord?stackOver(_deck,slot,panel):unstackCard(_deck,slot,panel)},service.moveVertical=function(slot,panel){var _deck=getCardList();switchVertical(_deck,slot,panel)},service.unstackLeft=function(panel){if(panel.y_coord>0){var _deck=getCardList(),unstack_coord=-CoreVars.x_dim_em;unstackCard(_deck,{x_coord:unstack_coord},panel)}},service.unstackRight=function(panel){if(panel.y_coord>0){var _deck=getCardList(),_last=PanelUtils.getLastPanel(_deck),unstack_coord=_last.panel.x_coord+CoreVars.x_dim_em;unstackCard(_deck,{x_coord:unstack_coord},panel)}},service}]),angular.module("move").factory("onCardMove",["CoreVars","MoveHub","checkEdge",function(CoreVars,MoveHub,checkEdge){return function(object){if(!CoreVars.cardMoving){var mouseX=object.mouseX,mouseY=object.mouseY,moveY=(object.moveX,object.moveY),vectorX=Math.abs(object.moveX),vectorY=Math.abs(object.moveY),slot=object.slot,slot_x=slot.x_coord,slot_y=slot.y_coord,slot_x_px=object.offset.left,slot_y_px=object.offset.top,slot_x_overlap=slot.leftId||slot.rightId,slot_y_overlap=slot.aboveId||slot.belowId,panel=object.panel,panel_x=panel.x_coord,panel_y=panel.y_coord,panel_x_overlap=panel.leftId||panel.rightId,panel_y_overlap=panel.aboveId||panel.belowId,changeX=Math.abs(panel_x-slot_x),changeY=Math.abs(panel_y-slot_y),crossingResult=checkEdge.crossing(slot,slot_x_px,slot_y_px,mouseX,mouseY);!crossingResult||0===changeX&&0===changeY||("top"===crossingResult?(console.log("crossing top"),vectorX>0&&!slot_y_overlap&&!slot_x_overlap&&!panel_x_overlap?(console.log("cardPanel:moveDiagonalUp"),MoveHub.moveDiagonalUp(slot,panel)):0!==changeX||panel_y_overlap?(console.log("cardPanel:moveHorizontal"),MoveHub.moveHorizontal(slot,panel)):(console.log("cardPanel:moveVertical"),MoveHub.moveVertical(slot,panel))):"bottom"===crossingResult?(console.log("crossing bottom"),changeX>0&&changeX<=CoreVars.x_dim_px?(console.log("cardPanel:moveDiagonalDown"),MoveHub.moveDiagonalDown(slot,panel)):0!==changeX||panel_y_overlap?(console.log("cardPanel:moveHorizontal"),MoveHub.moveHorizontal(slot,panel)):(console.log("cardPanel:moveVertical"),MoveHub.moveVertical(slot,panel))):("left"===crossingResult||"right"===crossingResult)&&(console.log("crossing left or right"),2*vectorY>vectorX?0>moveY?(console.log("cardPanel:moveDiagonalUp"),MoveHub.moveDiagonalUp(slot,panel)):moveY>0&&(console.log("cardPanel:moveDiagonalDown"),MoveHub.moveDiagonalDown(slot,panel)):(console.log("cardPanel:moveHorizontal"),MoveHub.moveHorizontal(slot,panel))))}}}]),angular.module("move").factory("PanelUtils",["$rootScope","$resource",function($rootScope,$resource){var service={};return service.getPanel=function(cardList,panelId){if(cardList.length>0){for(var _panel={x_coord:0,y_coord:0},_index=0,_order=0,ia=0;ia<cardList.length;ia++){var test_a=cardList[ia];test_a._id===panelId&&(_panel=test_a,_index=ia)}for(var ib=0;ib<cardList.length;ib++){var test_b=cardList[ib];test_b.x_coord<_panel.x_coord?_order++:test_b.x_coord===_panel.x_coord&&test_b.y_coord<_panel.y_coord&&_order++}return{panel:_panel,index:_index,order:_order}}console.log("Error: cardList.length = 0")},service.getLastPanel=function(cardList){var _index=0,_panel={x_coord:0};if(cardList.length>0)for(var i=0;i<cardList.length;i++)cardList[i].x_coord>(_panel.x_coord||-1)&&(_index=i,_panel=cardList[i]);return{index:_index,panel:_panel}},service.getLowestPanel=function(cardList,x_coord){var _index=0,_panel={y_coord:0};if(cardList.length>0)for(var i=0;i<cardList.length;i++)cardList[i].x_coord===x_coord&&cardList[i].y_coord>(_panel.y_coord||-1)&&(_index=i,_panel=cardList[i]);return{index:_index,panel:_panel}},service.removePanel=function(cardList,panel){for(var i=0;i<cardList.length;i++)cardList[i]===panel&&cardList.splice(i,1)},service.getPanelData=function(panel){switch(panel.panelType){case"Aspect":return panel.aspectData;case"Trait":return panel.traitData;case"Feat":return panel.featData;case"Augment":return panel.augmentData;case"Item":return panel.itemData;case"Origin":return panel.originData;default:return!1}},service.setPanelData=function(panel,cardData){switch(panel.panelType){case"Aspect":panel.aspectData=cardData;break;case"Trait":panel.traitData=cardData;break;case"Feat":panel.featData=cardData;break;case"Augment":panel.augmentData=cardData;break;case"Item":panel.itemData=cardData;break;case"Origin":panel.originData=cardData;break;default:return!1}},service.getCardParams=function(panel){var cardId;switch(panel.panelType){case"Aspect":return cardId=panel.aspectData._id,{aspectId:panel.aspectData._id};case"Trait":return cardId=panel.traitData._id,{traitId:panel.traitData._id};case"Feat":return cardId=panel.featData._id,{featId:panel.featData._id};case"Augment":return cardId=panel.augmentData._id,{augmentId:panel.augmentData._id};case"Item":return cardId=panel.itemData._id,{itemId:panel.itemData._id};case"Origin":return cardId=panel.originData._id,{originId:panel.originData._id};default:return!1}},service}]),angular.module("move").factory("shuffleDeck",["$rootScope","CoreVars","PanelUtils","DeckUtils","StackUtils",function($rootScope,CoreVars,PanelUtils,DeckUtils,StackUtils){return function(cardList){var _refArray=DeckUtils.getRefArray(cardList),_x_coord=0,_y_coord=0,pushRight=function(current,previous){console.log("pushRight"),_x_coord+=15,_y_coord=0,current.x_coord=_x_coord,current.y_coord=_y_coord,previous.belowId=null,previous.rightId=null,current.aboveId=null,current.belowId=null,current.leftId=null,current.rightId=null},stackRight=function(current,previous){console.log("stackRight"),_x_coord+=3,_y_coord=0,current.x_coord=_x_coord,current.y_coord=_y_coord,previous.rightId=current._id,current.aboveId=null,current.belowId=null,current.leftId=previous._id,current.rightId=null},pushUp=function(current,previous){console.log("pushUp"),_y_coord+=21,current.x_coord=_x_coord,current.y_coord=_y_coord,previous.belowId=null,current.aboveId=null,current.belowId=null,current.leftId=null,current.rightId=null},stackUp=function(current,previous){console.log("stackUp"),_y_coord+=3,current.x_coord=_x_coord,current.y_coord=_y_coord,previous.belowId=current._id,current.aboveId=previous._id,current.belowId=null,current.leftId=null,current.rightId=null};_refArray.sort(function(){return.5-Math.random()});for(var i=0;i<_refArray.length;i++){{var _previous=cardList[_refArray[i-1]]||null,_current=cardList[_refArray[i]];cardList[_refArray[i]+1]||null}if(_previous){var _1d4=Math.floor(4*Math.random()+1);switch(_1d4){case 1:_previous.leftId?pushRight(_current,_previous):_previous.belowId||_previous.y_coord>0?pushRight(_current,_previous):pushRight(_current,_previous);break;case 2:_previous.leftId?stackRight(_current,_previous):_previous.belowId||_previous.y_coord>0?pushRight(_current,_previous):stackRight(_current,_previous);break;case 3:_previous.leftId?pushRight(_current,_previous):_previous.belowId||_previous.y_coord>0?stackUp(_current,_previous):pushUp(_current,_previous);break;case 4:_previous.leftId?stackRight(_current,_previous):_previous.belowId||_previous.y_coord>0?stackUp(_current,_previous):stackUp(_current,_previous)}}else _current.x_coord=0,_current.y_coord=0,_current.leftId=null,_current.aboveId=null}}}]),angular.module("move").factory("stackOver",["$rootScope","CoreVars","Bakery","PanelUtils","StackUtils",function($rootScope,CoreVars,Bakery,PanelUtils,StackUtils){return function(cardList,slot,panel){if(!CoreVars.cardMoving&&!slot.x_overlap&&!panel.x_overlap){console.log("stackOver");var slot_x=slot.x_coord,slot_y=slot.y_coord,panel_x=panel.x_coord,panel_y=panel.y_coord,panel_lowest_coord=PanelUtils.getLowestPanel(cardList,panel_x).panel.y_coord,newColumn=panel_x>slot_x?slot_x:slot_x-CoreVars.x_dim_em;if(!(slot.leftId||slot.rightId||panel.leftId||panel.rightId)){CoreVars.setCardMoving();for(var ia=0;ia<cardList.length;ia++)!cardList[ia].dragging&&cardList[ia].x_coord===newColumn&&cardList[ia].y_coord>slot_y&&(cardList[ia].y_coord+=panel_lowest_coord+CoreVars.y_dim_em),cardList[ia].dragging&&(cardList[ia].x_coord=slot_x,cardList[ia].y_coord+=slot_y+CoreVars.y_dim_em-panel_y),cardList[ia].x_coord>panel_x&&0===panel_y&&(cardList[ia].x_coord-=CoreVars.x_dim_em)}$rootScope.$digest()}}}]),angular.module("move").factory("stackUnder",["$rootScope","CoreVars","Bakery","PanelUtils","StackUtils",function($rootScope,CoreVars,Bakery,PanelUtils,StackUtils){return function(cardList,slot,panel){if(!(CoreVars.cardMoving||slot.leftId||slot.rightId||panel.leftId||panel.rightId)){var panel_x=panel.x_coord,panel_lowest_coord=(panel.y_coord,PanelUtils.getLowestPanel(cardList,panel_x).panel.y_coord),slot_x=slot.x_coord,newColumn=(slot.y_coord,panel_x>slot_x?slot_x:slot_x-CoreVars.x_dim_em);panel.aboveId=slot._id,slot.belowId=panel._id,CoreVars.setCardMoving();for(var i=0;i<cardList.length;i++){var _current=cardList[i];_current.dragging||_current.x_coord!==slot_x||(_current.y_coord+=panel_lowest_coord+CoreVars.y_tab_em),_current.x_coord>panel_x&&(_current.x_coord-=CoreVars.x_dim_em),_current.dragging&&(_current.x_coord=newColumn)}$rootScope.$digest()}}}]),angular.module("move").factory("StackUtils",["$rootScope","PanelUtils","DeckUtils",function($rootScope,PanelUtils,DeckUtils){var service={};return service.getStack=function(cardList,panel){var _refArray=DeckUtils.getRefArray(cardList),_panelOrder=PanelUtils.getPanel(cardList,panel._id).order,_panelArray=[];if(console.log("getStack: "+panel.aboveId+"/"+panel.belowId+"/"+panel.leftId+"/"+panel.rightId),panel.leftId||panel.rightId)for(var ia=0;ia<_refArray.length;ia++){var test_a=cardList[_refArray[ia]];test_a.x_coord===panel.x_coord-3*(_panelOrder-ia)&&_panelArray.push(test_a)}else if(panel.aboveId||panel.belowId)for(var ib=0;ib<_refArray.length;ib++){var test_b=cardList[_refArray[ib]];test_b.y_coord===panel.y_coord-3*(_panelOrder-ib)&&_panelArray.push(test_b)}else _panelArray.push(panel);return _panelArray.sort(function(a,b){var axy=100*a.x_coord+a.y_coord,bxy=100*b.x_coord+b.y_coord;return axy-bxy}),_panelArray},service.setStack=function(cardList,panel,callBack){var _refArray=DeckUtils.getRefArray(cardList),_panelOrder=PanelUtils.getPanel(cardList,panel._id).order,_panelArray=[];if(panel.aboveId&&console.log("aboveId: "+panel.aboveId),panel.belowId&&console.log("belowId: "+panel.belowId),panel.leftId&&console.log("leftId: "+panel.leftId),panel.rightId&&console.log("rightId: "+panel.rightId),panel.leftId||panel.rightId)for(var ia=0;ia<_refArray.length;ia++){var current_a=cardList[_refArray[ia]];current_a.x_coord===panel.x_coord-3*(_panelOrder-ia)&&_panelArray.push(current_a)}else if(panel.aboveId||panel.belowId)for(var ib=0;ib<_refArray.length;ib++){var current_b=cardList[_refArray[ib]];current_b.y_coord===panel.y_coord-3*(_panelOrder-ib)&&_panelArray.push(current_b)}else _panelArray.push(panel);callBack&&callBack(_panelArray)},service.getRange=function(cardList,left_x,right_x){for(var _refArray=DeckUtils.getRefArray(cardList),_rangeArray=[],i=0;i<_refArray.length;i++){var _current=cardList[_refArray[i]];left_x<=_current.x_coord&&_current.x_coord<right_x&&_rangeArray.push(_current)}return _rangeArray},service.setRange=function(cardList,left_x,right_x,callBack){for(var _refArray=DeckUtils.getRefArray(cardList),_rangeArray=[],i=0;i<_refArray.length;i++){{var _current=(cardList[_refArray[i-1]]||null,cardList[_refArray[i]]);cardList[_refArray[i+1]]||null}left_x<=_current.x_coord&&_current.x_coord<right_x&&_rangeArray.push(_current)}callBack&&callBack(_rangeArray)},service.getColumn=function(cardList,x_coord){for(var _refArray=DeckUtils.getRefArray(cardList),_columnArray=[],i=0;i<_refArray.length;i++){var _test=cardList[_refArray[i]];_test.x_coord===x_coord&&_columnArray.push(_test)}return _columnArray},service.setColumn=function(cardList,x_coord,callBack){for(var _refArray=DeckUtils.getRefArray(cardList),_columnArray=[],i=0;i<_refArray.length;i++){var _test=cardList[_refArray[i]];_test.x_coord===x_coord&&_columnArray.push(_test)}callBack&&callBack(_columnArray)},service.getStackDimens=function(cardList,panel){var _stackArray=service.getStack(cardList,panel);_stackArray.length||(console.log("Bingo!"),console.log(cardList),console.log(panel));var _left=_stackArray[0].x_coord,_right=_stackArray[_stackArray.length-1].x_coord;return{left:_left,right:_right}},service}]),angular.module("move").factory("switchHorizontal",["$rootScope","CoreVars","Bakery","PanelUtils","DeckUtils","StackUtils",function($rootScope,CoreVars,Bakery,PanelUtils,DeckUtils,StackUtils){return function(cardList,slot,panel){if(!CoreVars.cardMoving){console.log("switchHorizontal"),CoreVars.setCardMoving();var leftEdge,rightEdge,leftLeft,rightLeft,leftRight,rightRight,leftPanel,rightPanel,leftStack=(StackUtils.getStack(cardList,slot),StackUtils.getStack(cardList,panel),[]),rightStack=[],slotDimens=StackUtils.getStackDimens(cardList,slot),panelDimens=StackUtils.getStackDimens(cardList,panel);slot.x_coord<panel.x_coord?(leftPanel=slot,rightPanel=panel,leftLeft=slotDimens.left,leftRight=panelDimens.left,rightLeft=panelDimens.left,rightRight=panelDimens.right+CoreVars.x_dim_em,leftStack=StackUtils.getRange(cardList,leftEdge,rightEdge),rightStack=StackUtils.getStack(cardList,slot)):panel.x_coord<slot.x_coord&&(leftPanel=panel,rightPanel=slot,leftLeft=panelDimens.left,leftRight=panelDimens.right+CoreVars.x_dim_em,rightLeft=panelDimens.right+CoreVars.x_dim_em,rightRight=slotDimens.right+CoreVars.x_dim_em,leftStack=StackUtils.getStack(cardList,panel),rightStack=StackUtils.getRange(cardList,leftEdge,rightEdge)),console.log("LL: "+leftLeft+" / LR: "+leftRight+" | RL: "+rightLeft+" / RR: "+rightRight);var leftWidth=leftRight-leftLeft,rightWidth=rightRight-rightLeft,totalWidth=rightRight-leftLeft;console.log("LW: "+leftWidth+" + RW: "+rightWidth+" = TW: "+totalWidth),StackUtils.setRange(cardList,leftLeft,leftRight,function(_leftStack){StackUtils.setRange(cardList,rightLeft,rightRight,function(_rightStack){for(var ib=0;ib<_rightStack.length;ib++)_rightStack[ib].x_coord-=totalWidth-rightWidth}),console.log(_leftStack);for(var ic=0;ic<_leftStack.length;ic++)_leftStack[ic].x_coord+=totalWidth-leftWidth}),$rootScope.$digest()}}}]),angular.module("move").factory("switchVertical",["$rootScope","CoreVars","Bakery","PanelUtils","StackUtils",function($rootScope,CoreVars,Bakery,PanelUtils,StackUtils){return function(cardList,slot,panel){if(console.log("switchVertical"),!CoreVars.cardMoving){{var slot_x=slot.x_coord,slot_y=slot.y_coord,slot_index=PanelUtils.getPanel(cardList,slot._id).index,slot_y_overlap=slot.y_overlap,panel_y=(panel.x_coord,panel.y_coord),panel_index=PanelUtils.getPanel(cardList,panel._id).index,panel_y_overlap=panel.y_overlap,lowest_index=PanelUtils.getLowestPanel(cardList,slot_x).index;cardList[lowest_index].y_coord}panel_y-slot_y>0?(CoreVars.setCardMoving(),cardList[slot_index].y_coord=panel_y,cardList[slot_index].y_overlap=panel_y_overlap,$rootScope.$digest(),cardList[panel_index].y_coord=slot_y,cardList[panel_index].y_overlap=slot_y_overlap):0>panel_y-slot_y&&(CoreVars.setCardMoving(),cardList[slot_index].y_coord=panel_y,cardList[slot_index].y_overlap=panel_y_overlap,$rootScope.$digest(),cardList[panel_index].y_coord=slot_y,cardList[panel_index].y_overlap=slot_y_overlap),$rootScope.$digest()}}}]),angular.module("move").factory("toggleOverlap",["$rootScope","CoreVars","PanelUtils","DeckUtils","StackUtils",function($rootScope,CoreVars,PanelUtils,DeckUtils,StackUtils){return function(cardList,panel){if(!CoreVars.cardMoved&&!CoreVars.cardMoving){console.log("toggleOverlap");var _refArray=DeckUtils.getRefArray(cardList),_panelObject=PanelUtils.getPanel(cardList,panel._id),_panelOrder=_panelObject.order,_panelColumn=StackUtils.getColumn(cardList,panel.x_coord),_previous=cardList[_refArray[_panelOrder-1]]||null,_next=cardList[_refArray[_panelOrder+1]]||null,_last=PanelUtils.getLastPanel(cardList).panel,unstack_x=(PanelUtils.getLowestPanel(cardList,panel.x_coord).panel,function(){console.log("unstack_x - _previous: "+_previous.x_coord+"/"+_previous.y_coord),console.log("unstack_x - panel: "+panel.x_coord+"/"+panel.y_coord),CoreVars.setCardMoving(),_previous.rightId=null,panel.leftId=null,StackUtils.setRange(cardList,panel.x_coord,_last.x_coord+1,function(rangeArray){for(var ia=0;ia<rangeArray.length;ia++)rangeArray[ia].x_coord+=CoreVars.x_cover_em})}),stack_x=function(){console.log("stack_x - _previous: "+_previous.x_coord+"/"+_previous.y_coord),console.log("stack_x - panel: "+panel.x_coord+"/"+panel.y_coord),CoreVars.setCardMoving(),_previous.rightId=panel._id,panel.leftId=_previous._id,StackUtils.setRange(cardList,panel.x_coord,_last.x_coord+1,function(rangeArray){for(var ia=0;ia<rangeArray.length;ia++)rangeArray[ia].x_coord-=CoreVars.x_cover_em})},unstack_y=function(){console.log("unstack_y - panel: "+panel.x_coord+"/"+panel.y_coord),console.log("unstack_y - _next: "+_next.x_coord+"/"+_next.y_coord),CoreVars.setCardMoving(),panel.aboveId=null,_next.belowId=null,StackUtils.setColumn(cardList,panel.x_coord,function(columnArray){console.log("columnArray length "+columnArray.length);for(var i=0;i<columnArray.length;i++)console.log("unstack_y: "+columnArray[i].y_coord),panel.y_coord<columnArray[i].y_coord&&(columnArray[i].y_coord+=CoreVars.y_cover_em)})},stack_y=function(){console.log("stack_y - panel: "+panel.x_coord+"/"+panel.y_coord),console.log("stack_y - _next: "+_next.x_coord+"/"+_next.y_coord),CoreVars.setCardMoving(),panel.aboveId=_next._id,_next.belowId=panel._id,StackUtils.setColumn(cardList,panel.x_coord,function(columnArray){console.log("columnArray length "+columnArray.length);for(var i=0;i<columnArray.length;i++)console.log("stack_y: "+columnArray[i].y_coord),panel.y_coord<columnArray[i].y_coord&&(columnArray[i].y_coord-=CoreVars.y_cover_em)})};console.log("panelId: "+panel._id),_previous&&1===_panelColumn.length&&(panel.leftId&&_previous.rightId?panel.x_coord===_previous.x_coord+3&&unstack_x():panel.y_coord===_previous.y_coord&&panel.x_coord===_previous.x_coord+15&&stack_x()),!_next||panel.leftId||panel.rightId||(panel.aboveId&&_next.belowId?panel.y_coord===_next.y_coord-3&&unstack_y():panel.x_coord===_next.x_coord&&panel.y_coord===_next.y_coord-21&&stack_y()),$rootScope.$digest(),CoreVars.cardMoved=!1}}}]),angular.module("move").factory("unstackCard",["$rootScope","CoreVars","Bakery","PanelUtils","StackUtils",function($rootScope,CoreVars,Bakery,PanelUtils,StackUtils){return function(cardList,slot,panel){if(!CoreVars.cardMoving){if(PanelUtils.getLowestPanel(cardList,panel.x_coord).panel.y_coord>0){var new_slot_index,new_panel_index,panel_x=panel.x_coord,panel_y=panel.y_coord,panel_index=PanelUtils.getPanel(cardList,panel._id).index,panel_y_overlap=(panel.x_overlap,panel.y_overlap),slot_x=slot.x_coord;if(panel_x-slot_x>0){if(CoreVars.setCardMoving(),panel_y_overlap)for(var ia=0;ia<cardList.length;ia++)cardList[ia].x_coord>panel_x&&(cardList[ia].x_coord+=CoreVars.x_dim_em),cardList[ia].x_coord===panel_x&&panel_y_overlap&&(cardList[ia].y_coord<panel_y?cardList[ia].x_coord+=CoreVars.x_dim_em:cardList[ia].y_coord>=panel_y&&(cardList[ia].y_coord-=panel_y));else if(!panel_y_overlap){for(var ib=0;ib<cardList.length;ib++)cardList[ib].x_coord>=panel_x&&(cardList[ib].x_coord===panel_x&&cardList[ib].y_coord>panel_y&&(cardList[ib].y_coord-=CoreVars.y_dim_em),ib!==panel_index&&(cardList[ib].x_coord+=CoreVars.x_dim_em));cardList[panel_index].y_coord=0,cardList[panel_index].stacked=!1}new_slot_index=PanelUtils.getLowestPanel(cardList,panel_x).index,new_panel_index=PanelUtils.getLowestPanel(cardList,panel_x+CoreVars.x_dim_em).index,cardList[new_slot_index].y_overlap=!1,0===cardList[new_slot_index].y_coord&&(cardList[new_slot_index].stacked=!1),cardList[new_panel_index].y_overlap=!1,0===cardList[new_panel_index].y_coord&&(cardList[new_panel_index].stacked=!1)}else if(0>panel_x-slot_x&&!CoreVars.cardMoving){if(CoreVars.setCardMoving(),panel_y_overlap)for(var ic=0;ic<cardList.length;ic++)cardList[ic].x_coord>panel_x&&(cardList[ic].x_coord+=CoreVars.x_dim_em),cardList[ic].x_coord===panel_x&&cardList[ic].y_coord>=panel_y&&(cardList[ic].x_coord+=CoreVars.x_dim_em,cardList[ic].y_coord-=panel_y);else if(!panel_y_overlap){for(var id=0;id<cardList.length;id++)cardList[id].x_coord>panel_x&&(cardList[id].x_coord+=CoreVars.x_dim_em),cardList[id].x_coord===panel_x&&cardList[id].y_coord>panel_y&&(cardList[id].y_coord-=CoreVars.y_dim_em);cardList[panel_index].x_coord+=CoreVars.x_dim_em,
cardList[panel_index].y_coord=0}new_slot_index=PanelUtils.getLowestPanel(cardList,panel_x).index,new_panel_index=PanelUtils.getLowestPanel(cardList,slot_x).index,cardList[new_slot_index].y_overlap=!1,0===cardList[new_slot_index].y_coord&&(cardList[new_slot_index].stacked=!1),cardList[new_panel_index].y_overlap=!1,0===cardList[new_panel_index].y_coord&&(cardList[new_panel_index].stacked=!1)}}$rootScope.$digest()}}}]),angular.module("npcs").controller("NpcsController",["$scope","$stateParams","$location","Authentication","Npcs",function($scope,$stateParams,$location,Authentication,Npcs){$scope.authentication=Authentication,$scope.create=function(){var npc=new Npcs({name:this.name});npc.$save(function(response){$location.path("npcs/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(npc){if(npc){npc.$remove();for(var i in $scope.npcs)$scope.npcs[i]===npc&&$scope.npcs.splice(i,1)}else $scope.npc.$remove(function(){})},$scope.update=function(){var npc=$scope.npc;npc.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.npcs=Npcs.query(function(response){console.log(response)})},$scope.findOne=function(){$scope.npc=Npcs.get({npcId:$stateParams.npcId})}}]),angular.module("npcs").factory("Npcs",["$resource",function($resource){return $resource("npcs/:npcId",{npcId:"@_id"},{update:{method:"PUT"}})}]),angular.module("pcs").directive("ability",["$parse","$rootScope","$window","abilityDice",function($parse,$rootScope,$window,abilityDice){return{restrict:"A",link:function(scope,element,attrs){var _ability=$parse(attrs.ability)||null,_pressEvents="touchstart mousedown",initialize=function(){element.attr("draggable","false"),toggleListeners(!0),onHeightChange()},toggleListeners=function(enable){enable&&(scope.$on("$destroy",onDestroy),scope.$watch(attrs.ability,onAbilityChange),scope.$on("screenSize:onHeightChange",onHeightChange),element.on(_pressEvents,onPress))},onDestroy=function(enable){toggleListeners(!1)},getElementFontSize=function(){return parseFloat($window.getComputedStyle(element[0],null).getPropertyValue("font-size"))},convertEm=function(value){return value*getElementFontSize()},onAbilityChange=function(newVal,oldVal){_ability=newVal},getAbility=function(){var offset=element.offset(),caret=_ability.order<4?"top-caret":"bottom-caret",topEdge=_ability.order<4?offset.top+convertEm(3):offset.top-convertEm(9),leftEdge=offset.left-convertEm(.5);return{caret:caret,topEdge:topEdge,leftEdge:leftEdge,ability:_ability}},onHeightChange=function(event,object){_ability.order===abilityDice.chosenAbility.order&&$rootScope.$broadcast("ability:setPosition",getAbility())},onPress=function(){abilityDice.chooseAbility(_ability),$rootScope.$broadcast("ability:onPress",getAbility())};initialize()}}}]),angular.module("pcs").directive("diceBox",["$window",function($window){return{restrict:"A",templateUrl:"../modules/pcs/views/dice-box.html",link:function(scope,element,attrs){var initialize=function(){element.attr("draggable","false"),toggleListeners(!0)},toggleListeners=function(enable){enable&&(scope.$on("$destroy",onDestroy),scope.$on("ability:onPress",setPosition),scope.$on("ability:setPosition",setPosition))},onDestroy=function(enable){toggleListeners(!1)},setPosition=function(event,object){var _caret=object.caret,_topEdge=object.topEdge,_leftEdge=object.leftEdge;element.removeClass("top-caret"),element.removeClass("bottom-caret"),element.addClass(_caret),element.css({top:_topEdge+"px",left:_leftEdge+"px"})};initialize()}}}]),angular.module("pcs").directive("modalDeck",["$window",function($window){return{restrict:"A",templateUrl:"../modules/pcs/views/modal-deck.html",link:function(scope,element,attrs){}}}]),angular.module("pcs").factory("PcsAugments",["Bakery","PanelUtils","StackUtils",function(Bakery,PanelUtils,StackUtils){var service={};return service.factorAugmentLimit=function(){Bakery.resource.augmentLimit=Math.round((Bakery.resource.level||0)/4),this.validateAugments()},service.validateAugments=function(){for(var ia=0;ia<Bakery.resource.augmentLimit;ia++)this.augmentAtLevel(4*ia+2)||this.addAugment(4*ia+2);for(var ic=0;ic<Bakery.resource.cardList.length;ic++)Bakery.resource.cardList[ic].level>Bakery.resource.level&&console.log("TODO: remove card")},service.augmentAtLevel=function(level){for(var augmentAtLevel=!1,ib=0;ib<Bakery.resource.cardList.length;ib++)"Augment"===Bakery.resource.cardList[ib].panelType&&Bakery.resource.cardList[ib].level===level&&(augmentAtLevel=!0);return augmentAtLevel},service.addAugment=function(level){var newAugment={_id:"augment"+level+"Id",panelType:"Augment",x_coord:PanelUtils.getLastPanel(Bakery.resource.cardList).panel.x_coord+15,y_coord:0,locked:!0,level:level,augmentData:{_name:"Level "+level+" Augment"}};Bakery.resource.cardList.push(newAugment)},service}]),angular.module("pcs").factory("PcsBread",["$stateParams","$location","Authentication","$resource","$rootScope","Bakery","PanelUtils","StackUtils","DeckUtils","pcsDefaults",function($stateParams,$location,Authentication,$resource,$rootScope,Bakery,PanelUtils,StackUtils,DeckUtils,pcsDefaults){var service={};return service.browse=function(){Bakery.resource={},Bakery.resource.cardList=[],Bakery.Pcs.query(function(response){response.unshift({_id:"playerOptionsId",panelType:"playerOptions"}),Bakery.resource.cardList=response,DeckUtils.setCardList(Bakery.resource.cardList)})},service.read=function(pc){Bakery.resource=Bakery.Pcs.get({pcId:pc._id})},service.edit=function(pc){pc.$update(function(response){console.log(response)},function(errorResponse){this.error=errorResponse.data.message})},service.add=function(){var pc=new Bakery.Pcs(pcsDefaults);pc.$save(function(response){Bakery.resource=response})},service["delete"]=function(resource,pc){var _pc_x=pc.x_coord,_pc_y=pc.y_coord;pc.$remove(function(response){resource&&PanelUtils.removePanel(resource.cardList,pc)}).then(function(response){resource&&DeckUtils.setDeckSize(resource)}).then(function(response){resource&&DeckUtils.collapseDeck(resource.cardList,{x_coord:_pc_x,y_coord:_pc_y})})},service}]),angular.module("pcs").factory("pcsDefaults",[function(){var defaultStats={abilities:[{name:"Strength",order:0,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Physique",order:1,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Flexibility",order:2,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Dexterity",order:3,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Acuity",order:4,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Intelligence",order:5,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Wisdom",order:6,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Charisma",order:7,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}}],dicepool:[{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0},{name:"d4",image:"modules/core/img/d_04.png",sides:"4",order:1},{name:"d6",image:"modules/core/img/d_06.png",sides:"6",order:2},{name:"d6",image:"modules/core/img/d_06.png",sides:"6",order:3},{name:"d8",image:"modules/core/img/d_08.png",sides:"8",order:4},{name:"d8",image:"modules/core/img/d_08.png",sides:"8",order:5},{name:"d10",image:"modules/core/img/d_10.png",sides:"10",order:6},{name:"d10",image:"modules/core/img/d_10.png",sides:"10",order:7},{name:"d12",image:"modules/core/img/d_12.png",sides:"12",order:8}],cardList:[{panelType:"pc1",x_coord:0,y_coord:0},{panelType:"pc2",x_coord:15,y_coord:0},{panelType:"pc3",x_coord:30,y_coord:0}]};return defaultStats}]),angular.module("pcs").factory("PcsFeats",["Bakery","PanelUtils","StackUtils",function(Bakery,PanelUtils,StackUtils){var service={};return service.factorFeatLimit=function(){Bakery.resource.featLimit=Math.ceil(Bakery.resource.level/4)||0,Bakery.resource.featDeck=Bakery.resource.level,this.validateFeats()},service.validateFeats=function(){for(var ia=0;ia<Bakery.resource.featDeck;ia++)this.featAtLevel(ia+1)||this.addFeat(ia+1);for(var ic=0;ic<Bakery.resource.cardList.length;ic++)Bakery.resource.cardList[ic].level>Bakery.resource.level&&console.log("TODO: remove card")},service.featAtLevel=function(level){for(var featAtLevel=!1,ib=0;ib<Bakery.resource.cardList.length;ib++)"Feat"===Bakery.resource.cardList[ib].panelType&&Bakery.resource.cardList[ib].level===level&&(featAtLevel=!0);return featAtLevel},service.addFeat=function(level){var newFeat={_id:"feat"+level+"Id",panelType:"Feat",x_coord:PanelUtils.getLastPanel(Bakery.resource.cardList).panel.x_coord+15,y_coord:0,locked:!0,level:level,featData:{name:"Level "+level+" Feat"}};Bakery.resource.cardList.push(newFeat)},service}]),angular.module("pcs").factory("PcsItems",["Bakery",function(Bakery){var service={};return service}]),angular.module("pcs").factory("PcsTraits",["Bakery","PanelUtils","StackUtils",function(Bakery,PanelUtils,StackUtils){var service={};return service.factorTraitLimit=function(){Bakery.resource.traitLimit=Math.floor((Bakery.resource.level||0)/4+1),this.validateTraits()},service.validateTraits=function(){for(var ia=0;ia<Bakery.resource.traitLimit;ia++)this.traitAtLevel(4*ia)||this.addTrait(4*ia);for(var ic=0;ic<Bakery.resource.cardList.length;ic++)Bakery.resource.cardList[ic].level>Bakery.resource.level&&console.log("TODO: remove card")},service.traitAtLevel=function(level){for(var traitAtLevel=!1,ib=0;ib<Bakery.resource.cardList.length;ib++)"Trait"===Bakery.resource.cardList[ib].panelType&&Bakery.resource.cardList[ib].level===level&&(traitAtLevel=!0);return traitAtLevel},service.addTrait=function(level){var newTrait={_id:"trait"+level+"Id",panelType:"Trait",x_coord:PanelUtils.getLastPanel(Bakery.resource.cardList).panel.x_coord+15,y_coord:0,locked:!0,level:level,traitData:{name:"Level "+level+" Trait"}};Bakery.resource.cardList.push(newTrait)},service}]),angular.module("decks").factory("Pcs",["$resource",function($resource){return $resource("pcs/:pcId",{pcId:"@_id"},{update:{method:"PUT"}})}]),angular.module("player").factory("abilityDice",["$rootScope","CoreVars","Bakery",function($rootScope,CoreVars,Bakery){var service={};service.chosenAbility={};var chosenDie={},previousDie={};return service.chooseAbility=function(ability){console.log(ability),CoreVars.modalShown=!0,CoreVars.diceBoxShown=!0,service.chosenAbility=ability},service.chooseDie=function(resource,order){CoreVars.modalShown=!1,CoreVars.diceBoxShown=!1,chosenDie=resource.dicepool[order],previousDie=service.chosenAbility.dice,resource.dicepool[order]=resource.dicepool[0],previousDie.order>0&&(resource.dicepool[previousDie.order]=previousDie),resource.abilities[service.chosenAbility.order].dice=chosenDie},service}]),angular.module("player").factory("factorDefenses",[function(){var service={};return service.factorBlock=function(resource){var dice_a=resource.abilities[0].dice,dice_b=resource.abilities[1].dice;Number(dice_a.sides)>Number(dice_b.sides)?resource.block="2"+dice_a.name:resource.block="2"+dice_b.name},service.factorDodge=function(resource){var dice_a=resource.abilities[2].dice,dice_b=resource.abilities[3].dice;Number(dice_a.sides)>Number(dice_b.sides)?resource.dodge="2"+dice_a.name:resource.dodge="2"+dice_b.name},service.factorAlertness=function(resource){var dice_a=resource.abilities[4].dice,dice_b=resource.abilities[5].dice;Number(dice_a.sides)>Number(dice_b.sides)?resource.alertness="2"+dice_a.name:resource.alertness="2"+dice_b.name},service.factorTenacity=function(resource){var dice_a=resource.abilities[6].dice,dice_b=resource.abilities[7].dice;Number(dice_a.sides)>Number(dice_b.sides)?resource.tenacity="2"+dice_a.name:resource.tenacity="2"+dice_b.name},service}]),angular.module("player").factory("factorStats",["CoreVars",function(CoreVars){var service={};return service.factorExperience=function(resource){for(var mLevel=0,mExperience=Number(resource.experience),increment=8;mExperience>=increment;increment++)mLevel++,mExperience-=increment;resource.level=mLevel},service.factorHealth=function(resource){resource.healthLimit=Math.round((Number(resource.abilities[0].dice.sides)+Number(resource.abilities[1].dice.sides))*((resource.level||0)/16+1)),resource.healthCurrent=Number(resource.healthLimit-resource.injury)},service.factorStamina=function(resource){resource.staminaLimit=Math.round((Number(resource.abilities[0].dice.sides)+Number(resource.abilities[1].dice.sides))*((resource.level||0)/16+1)),resource.staminaCurrent=Number(resource.healthLimit-resource.injury)},service.factorCarryingCapacity=function(resource){resource.carryCurrent=0,resource.carryLimit=Number(resource.abilities[0].dice.sides)+Number(resource.abilities[1].dice.sides)},service}]),angular.module("player").factory("PlayerHub",["$rootScope","CoreVars","Bakery","factorDefenses","factorStats","PcsTraits","PcsFeats","PcsAugments","abilityDice",function($rootScope,CoreVars,Bakery,factorDefenses,factorStats,PcsTraits,PcsFeats,PcsAugments,abilityDice){var service={};return service.chooseDie=function(order){switch(abilityDice.chooseDie(Bakery.resource,order),abilityDice.chosenAbility.order){case 0:case 1:factorDefenses.factorBlock(Bakery.resource),factorStats.factorHealth(Bakery.resource),factorStats.factorStamina(Bakery.resource),factorStats.factorCarryingCapacity(Bakery.resource);break;case 2:case 3:factorDefenses.factorDodge(Bakery.resource);break;case 4:case 5:factorDefenses.factorAlertness(Bakery.resource);break;case 6:case 7:factorDefenses.factorTenacity(Bakery.resource)}},service.watchEXP=function(newValue,oldValue){"pc"===Bakery.resource.deckType&&newValue!==oldValue&&(CoreVars.EXP=parseInt(newValue),Bakery.resource.experience=parseInt(newValue))},service.watchExperience=function(newValue,oldValue){"pc"===Bakery.resource.deckType&&newValue!==oldValue&&(factorStats.factorExperience(Bakery.resource),newValue!==CoreVars.EXP&&(CoreVars.EXP=newValue))},service.watchLevel=function(newValue,oldValue){"pc"===Bakery.resource.deckType&&(factorStats.factorHealth(Bakery.resource),factorStats.factorStamina(Bakery.resource),PcsTraits.factorTraitLimit(),PcsFeats.factorFeatLimit(),PcsAugments.factorAugmentLimit())},service}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);