"use strict";var ApplicationConfiguration=function(){var applicationModuleName="fsrpg",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("architect"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("narrator"),ApplicationConfiguration.registerModule("player"),ApplicationConfiguration.registerModule("users"),angular.module("architect").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Architect","architect","dropdown","/architect(/traits|/feats|/augments|/items)?",!0,["user"],"2"),Menus.addSubMenuItem("topbar","architect","PC Traits","architect/traits"),Menus.addSubMenuItem("topbar","architect","PC Feats","architect/feats"),Menus.addSubMenuItem("topbar","architect","PC Augments","architect/augments"),Menus.addSubMenuItem("topbar","architect","PC Items","architect/items")}]),angular.module("architect").config(["$stateProvider",function($stateProvider){$stateProvider.state("editTraits",{url:"/architect/traits",templateUrl:"modules/architect/views/edit-traits.client.view.html"}).state("editFeats",{url:"/architect/feats",templateUrl:"modules/architect/views/edit-feats.client.view.html"}).state("editAugments",{url:"/architect/augments",templateUrl:"modules/architect/views/edit-augments.client.view.html"}).state("editItems",{url:"/architect/items",templateUrl:"modules/architect/views/edit-items.client.view.html"})}]),angular.module("architect").controller("CardsCtrl",["$scope","$location","$log","$rootScope","DataSRVC","CardDeck","Cards",function($scope,$location,$log,$rootScope,DataSRVC,CardDeck,Cards){$scope.dataSRVC=DataSRVC,$scope.cards=Cards,$scope.cardDeck=CardDeck,$scope.status={isopen:!1},$scope.toggled=function(open){$scope.status.isopen=open,console.log($scope.status.isopen),$rootScope.$broadcast("CardsCtrl:onDropdown",{isOpen:$scope.status.isopen})};var initialize=function(){toggleListeners(!0)},toggleListeners=function(enable){enable&&$scope.$on("$destroy",onDestroy)},onDestroy=function(){toggleListeners(!1)};initialize()}]);var architectModule=angular.module("architect");architectModule.directive("cardPc1",function(){return{restrict:"A",templateUrl:"../modules/player/views/card-pc-1.html"}}).directive("cardPc2",function(){return{restrict:"A",templateUrl:"../modules/player/views/card-pc-2.html"}}).directive("cardPc3",function(){return{restrict:"A",templateUrl:"../modules/player/views/card-pc-3.html"}}).directive("diceDropdown",function(){return{restrict:"A",templateUrl:"../modules/player/views/dice-dropdown.html",scope:{ability:"="}}}).directive("stopEvent",function(){return{restrict:"A",link:function(scope,element){var _pressEvents="touchstart mousedown";element.on(_pressEvents,function(event){event.stopPropagation()})}}}).directive("stopClick",function(){return{restrict:"A",link:function(scope,element){element.on("click",function(event){event.stopPropagation()})}}});var architectModule=angular.module("architect");architectModule.directive("pcFeature",function(){return{restrict:"A",templateUrl:"../modules/architect/views/pc-feature.html"}}).directive("cardLogo",["$rootScope",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-logo.html"}}]).directive("cardHeader",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-header.html"}}).directive("cardDescription",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-description.html"}}).directive("cardModifiers",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-modifiers.html"}}).directive("cardBenefit",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-benefit.html"}}).directive("cardFooter",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-footer.html"}}).directive("cardAction",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-action.html",scope:{cardAction:"="}}}).directive("cardActionTitle",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-action-title.html"}}).directive("cardActionKeywords",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-action-keywords.html"}}).directive("cardActionPrompt",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-action-prompt.html"}}).directive("cardActionEffect",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-action-effect.html"}}).directive("cardActionAttack",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-action-attack.html"}}).directive("cardActionDefense",function(){return{restrict:"A",templateUrl:"../modules/architect/views/card-action-defense.html"}}).directive("elasticTextarea",["$timeout",function(){return{restrict:"A",link:function(scope,element){var resizeArea=function(){setTimeout(function(){element[0].style.height=element[0].scrollHeight+"px"},25)};scope.$watch(function(){return element[0].scrollHeight},function(newValue,oldValue){newValue!==oldValue&&resizeArea()}),resizeArea()}}}]).directive("fitContent",function(){return{restrict:"A",link:function(scope,element){var reduceText=function(){setTimeout(function(){for(var fontSize=parseInt(element.css("font-size"));element[0].offsetHeight>element.parent()[0].offsetHeight&&fontSize>=8;)fontSize--,element.css("font-size",fontSize+"px")},25)};scope.$watch(function(){return element[0].offsetHeight},function(newValue,oldValue){newValue>oldValue&&reduceText()}),element.css("font-size","13px"),reduceText()}}}),angular.module("architect").factory("CardsDeck",["Cards",function(Cards){function cardByIndex(index){for(var i=0;i<Cards.cardList.length;i++){var card=Cards.cardList[i];if(card.index===index)return i}}var service={};return service.shiftLeft=function(index){if(index>0){var _old=cardByIndex(index),_new=cardByIndex(index-1);Cards.cardList[_new].column+=Cards.cardList[_old].overlap?25:250,Cards.cardList[_old].column-=Cards.cardList[_new].overlap?25:250,Cards.cardList[_old].index=index-1,Cards.cardList[_new].index=index}Cards.cardList[cardByIndex(0)].overlap&&service.toggleOverlap(0)},service.shiftRight=function(index){if(index<Cards.cardList.length-1){var _old=cardByIndex(index),_new=cardByIndex(index+1);Cards.cardList[_new].column-=Cards.cardList[_old].overlap?25:250,Cards.cardList[_old].column+=Cards.cardList[_new].overlap?25:250,Cards.cardList[_old].index=index+1,Cards.cardList[_new].index=index}Cards.cardList[cardByIndex(0)].overlap&&service.toggleOverlap(0)},service.toggleOverlap=function(index){var _card=cardByIndex(index);if(Cards.cardList[_card].overlap){for(var index1=0;index1<Cards.cardList.length;index1++)Cards.cardList[index1].index>index-1&&(Cards.cardList[index1].column+=225);Cards.cardList[_card].overlap=!1}else{for(var index2=0;index2<Cards.cardList.length;index2++)Cards.cardList[index2].index>index-1&&(Cards.cardList[index2].column-=225);Cards.cardList[_card].overlap=!0}},service}]),angular.module("architect").factory("Cards",["$stateParams","$location","Authentication","$resource",function($stateParams,$location,Authentication,$resource){var Traits=$resource("traits/:traitId",{traitId:"@_id"},{update:{method:"PUT"}}),Feats=$resource("feats/:featId",{featId:"@_id"},{update:{method:"PUT"}}),Augments=$resource("augments/:augmentId",{augmentId:"@_id"},{update:{method:"PUT"}}),Items=$resource("items/:itemId",{itemId:"@_id"},{update:{method:"PUT"}}),Notes=$resource("notes/:noteId",{noteId:"@_id"},{update:{method:"PUT"}}),service={};return service.card={},service.cardList=[],service.cardType=0,service.cardNew=!1,service.cardSaved=!1,service.lockCard=function(card){card.deckType="card",card.locked=!0,card.x_coord=15*(card.cardNumber-1),card.y_coord=0,card.dragging=!1,card.stacked=!1},service.unlockCard=function(card){card.deckType="card",card.locked=!1,card.x_coord=15*(card.cardNumber-1),card.y_coord=0,card.dragging=!1,card.stacked=!1},service.setCardList=function(){for(var i=0;i<service.cardList.length;i++)service.lockCard(service.cardList[i])},service.changeDurability=function(card,add){add&&card.durability.modifier<4?card.durability.modifier+=1:!add&&card.durability.modifier>0&&(card.durability.modifier-=1)},service.changeSpeed=function(card,add){add&&card.speed.modifier<1?card.speed.modifier+=1:!add&&card.speed.modifier>-1&&(card.speed.modifier-=1)},service.changeFinesse=function(card,add){add&&card.finesse.modifier<0?card.finesse.modifier+=1:!add&&card.finesse.modifier>-2&&(card.finesse.modifier-=1)},service.changeWeight=function(card,add){add&&card.weight<9?card.weight+=1:!add&&card.weight>0&&(card.weight-=1)},service.changeCost=function(card,add){add&&card.cost<18?card.cost+=1:!add&&card.cost>0&&(card.cost-=1)},service.browseCards=function(cardType){switch(service.cardType=cardType,service.cardType){case 1:service.cardList=Traits.query(function(){service.setCardList()});break;case 2:service.cardList=Feats.query(function(){service.setCardList()});break;case 3:service.cardList=Augments.query(function(){service.setCardList()});break;case 4:service.cardList=Items.query(function(){service.setCardList()});break;case 5:service.cardList=Notes.query(function(){service.setCardList()})}},service.readCard=function(card){var cardId=card._id;switch(service.cardType){case 1:card=Traits.get({traitId:cardId});break;case 2:card=Feats.get({featId:cardId});break;case 3:card=Augments.get({augmentId:cardId});break;case 4:card=Items.get({itemId:cardId});break;case 4:card=Notes.get({noteId:cardId})}service.unlockCard(card)},service.editCard=function(card){card.$update(function(){service.unlockCard(card)},function(errorResponse){console.log(errorResponse)})},service.addCard=function(index){switch(service.cardType){case 1:this.card=new Traits({deckType:"card",cardNumber:index,dragging:!1,stacked:!1}),this.card.$save(function(){for(var i in service.cardList)service.cardList[i].cardNumber>=index&&(service.cardList[i].cardNumber+=1,service.cardList[i].x_coord+=15,service.cardList[i].$update());service.cardList.push(service.card),service.unlockCard(service.card)},function(errorResponse){console.log(errorResponse)});break;case 2:this.card=new Feats({deckType:"card",cardNumber:index,dragging:!1,stacked:!1}),this.card.$save(function(){for(var i in service.cardList)service.cardList[i].cardNumber>=index&&(service.cardList[i].cardNumber+=1,service.cardList[i].x_coord+=15,service.cardList[i].$update());service.cardList.push(service.card),service.unlockCard(service.card)},function(errorResponse){console.log(errorResponse)});break;case 3:this.card=new Augments({deckType:"card",cardNumber:index,dragging:!1,stacked:!1}),this.card.$save(function(){for(var i in service.cardList)service.cardList[i].cardNumber>=index&&(service.cardList[i].cardNumber+=1,service.cardList[i].x_coord+=15,service.cardList[i].$update());service.cardList.push(service.card),service.unlockCard(service.card)},function(errorResponse){console.log(errorResponse)});break;case 4:this.card=new Items({deckType:"card",cardNumber:index,dragging:!1,stacked:!1}),this.card.$save(function(){for(var i in service.cardList)service.cardList[i].cardNumber>=index&&(service.cardList[i].cardNumber+=1,service.cardList[i].x_coord+=15,service.cardList[i].$update());service.cardList.push(service.card),service.unlockCard(service.card)},function(errorResponse){console.log(errorResponse)});break;case 5:this.card=new Notes({deckType:"card",cardNumber:index,dragging:!1,stacked:!1}),this.card.$save(function(){for(var i in service.cardList)service.cardList[i].cardNumber>=index&&(service.cardList[i].cardNumber+=1,service.cardList[i].x_coord+=15,service.cardList[i].$update());service.cardList.push(service.card),service.unlockCard(service.card)},function(errorResponse){console.log(errorResponse)})}},service.deleteCard=function(card){if(card){card.$remove();for(var i in service.cardList)this.cardList[i]===card&&this.cardList.splice(i,1),this.cardList[i]&&this.cardList[i].cardNumber>card.cardNumber&&(console.log(this.cardList[i].cardNumber+" / "+card.cardNumber),this.cardList[i].cardNumber-=1,this.cardList[i].x_index-=1,this.cardList[i].x_coord-=15)}},service}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]);var coreModule=angular.module("core");coreModule.controller("HomeController",["$scope","Authentication","CardDeck","HomeDemo",function($scope,Authentication,CardDeck,HomeDemo){$scope.authentication=Authentication,$scope.cardDeck=CardDeck,$scope.homeDemo=HomeDemo;var initialize=function(){toggleListeners(!0)},toggleListeners=function(enable){enable&&$scope.$on("$destroy",onDestroy)},onDestroy=function(){toggleListeners(!1)};initialize()}]);var cardsModule=angular.module("core");cardsModule.directive("cardDeck",["$rootScope","$window","CardDeck",function($rootScope,$window){return{restrict:"A",link:function(scope,element){var pressed=!1,initialize=function(){toggleListeners(!0)},toggleListeners=function(enable){enable&&(scope.$on("$destroy",onDestroy),element.on("mouseleave",onMouseLeave),scope.$on("screenSize:onHeightChange",onHeightChange),scope.$on("CardDeck:setDeckWidth",setDeckWidth),scope.$on("cardPanel:onPressCard",onPress),scope.$on("cardPanel:onReleaseCard",onRelease),scope.$on("cardPanel:onMoveCard",onMoveCard))},onDestroy=function(){toggleListeners(!1)},onHeightChange=function(event,object){var windowHeight=object.newHeight;element.css({height:windowHeight+"px"})},setDeckWidth=function(event,object){var deckWidth=object.deckWidth+3;element.css({width:deckWidth+"em"})},getElementFontSize=function(){return parseFloat($window.getComputedStyle(element[0],null).getPropertyValue("font-size"))},convertEm=function(value){return value*getElementFontSize()},onPress=function(){pressed=!0},onRelease=function(){pressed=!1},onMoveCard=function(event,object){var deckOffset=element.offset(),deckWidth=element[0].offsetWidth,deckLeftEdge=deckOffset.left,deckRightEdge=deckLeftEdge+deckWidth-convertEm(3);object.mouseX<=deckLeftEdge?scope.$emit("cardDeck:unstackLeft",{panel:object.panel}):object.mouseX>=deckRightEdge&&scope.$emit("cardDeck:unstackRight",{panel:object.panel})},onMouseLeave=function(){pressed&&$rootScope.$broadcast("cardDeck:onMouseLeave")};initialize()}}}]);var coreModule=angular.module("core");coreModule.directive("cardPanel",["$document","$parse","$rootScope","$window","CardDeck",function($document,$parse,$rootScope,$window){return{restrict:"A",templateUrl:"../modules/core/views/card-panel.html",link:function(scope,element,attrs){Array.min=function(array){return Math.min.apply(Math,array)};var _startX,_startY,_mouseX,_mouseY,_moveX,_moveY,_cardX,_cardY,_startCol,_mouseCol,_startRow,_mouseRow,_moveTimer,_x_dim,_y_dim,_x_tab,_y_tab,_x_cover,_y_cover,_dropdownOpen=!1,_card=$parse(attrs.card)||null,_hasTouch="ontouchstart"in window,_pressEvents="touchstart mousedown",_moveEvents="touchmove mousemove",_releaseEvents="touchend mouseup",_pressTimer=null,initialize=function(){element.attr("draggable","false"),toggleListeners(!0),$document.ready(function(){onHeightChange()})},toggleListeners=function(enable){enable&&(scope.$on("$destroy",onDestroy),scope.$watch(attrs.card,onCardChange),scope.$on("screenSize:onHeightChange",onHeightChange),scope.$on("cardPanel:onPressCard",onPressCard),scope.$on("cardPanel:onMoveCard",onMoveCard),scope.$on("cardPanel:onReleaseCard",onReleaseCard),scope.$on("cardDeck:onMouseLeave",onMouseLeave),scope.$on("CardsCtrl:onDropdown",onDropdown),scope.$watch("card.x_coord",resetPosition),scope.$watch("card.y_coord",resetPosition),element.on(_pressEvents,onPress),_hasTouch||"img"!==element[0].nodeName.toLowerCase()||element.on("mousedown",function(){return!1}))},onDestroy=function(){toggleListeners(!1)},onCardChange=function(newVal){_card=newVal,setPosition()},onDropdown=function(event,object){_dropdownOpen=object.isOpen},getElementFontSize=function(){return parseFloat($window.getComputedStyle(element[0],null).getPropertyValue("font-size"))},convertEm=function(value){return value*getElementFontSize()},onHeightChange=function(){_x_dim=convertEm(15),_y_dim=convertEm(21),_x_tab=convertEm(3),_y_tab=convertEm(3),_x_cover=convertEm(12),_y_cover=convertEm(18),setPosition()},resetPosition=function(){element.hasClass("card-moving")&&setPosition()},setPosition=function(){element.css({height:_y_dim+"px",width:_x_dim+"px",top:_card.y_coord+"em",left:_card.x_coord+"em"})},onPress=function(event){_dropdownOpen?$document.triggerHandler("click"):_hasTouch?(cancelPress(),_pressTimer=setTimeout(function(){cancelPress(),onLongPress(event)},100),$document.on(_moveEvents,cancelPress),$document.on(_releaseEvents,cancelPress)):_hasTouch||onLongPress(event)},cancelPress=function(){clearTimeout(_pressTimer),$document.off(_moveEvents,cancelPress),$document.off(_releaseEvents,cancelPress)},onLongPress=function(event){_startX=event.pageX||event.touches[0].pageX,_startY=event.pageY||event.touches[0].pageY,_moveX=0,_moveY=0,$document.on(_moveEvents,onMove),$document.on(_releaseEvents,onRelease),element.removeClass("card-moving"),$rootScope.$broadcast("cardPanel:onPressCard",{startX:_startX,startY:_startY,panel:_card})},onPressCard=function(event,object){_startCol=convertEm(_card.x_coord),_startRow=convertEm(_card.y_coord);var panel=object.panel,panel_x=panel.x_coord,panel_y=panel.y_coord,panel_y_overlap=panel.y_overlap,slot=_card,slot_x=slot.x_coord,slot_y=slot.y_coord;(slot_y!==panel_y||slot_x!==panel_x)&&(slot_x!==panel_x?element.addClass("card-moving"):slot_x!==panel_x&&slot_y>panel_y&&panel_y_overlap?element.addClass("card-moving"):slot_x!==panel_x||panel_y_overlap||element.addClass("card-moving"))},onMove=function(event){event.preventDefault(),_mouseX=event.pageX||event.touches[0].pageX,_mouseY=event.pageY||event.touches[0].pageY,_mouseCol=convertEm(_card.x_coord),_mouseRow=convertEm(_card.y_coord),_moveX=_mouseX-_startX,_moveY=_mouseY-_startY,_cardX=_moveX+_startCol-(_startCol-_mouseCol),_cardY=_moveY+_startRow-(_startRow-_mouseRow),element.css({left:_moveX+_startCol+"px",top:_moveY+_startRow+"px"}),$rootScope.$broadcast("cardPanel:onMoveCard",{mouseX:_mouseX,mouseY:_mouseY,moveX:_moveX,moveY:_moveY,panelX:_cardX,panelY:_cardY,panel:_card})},onMoveCard=function(event,object){var mouseX=object.mouseX,mouseY=object.mouseY,moveX=object.moveX,moveY=object.moveY,vectorX=Math.abs(object.moveX),vectorY=Math.abs(object.moveY),panel=object.panel,panel_x=panel.x_coord,panel_y=panel.y_coord,panel_x_overlap=panel.x_overlap,panel_y_overlap=panel.y_overlap,slot=_card,slot_x=slot.x_coord,slot_y=slot.y_coord,slot_x_overlap=slot.x_overlap,changeX=(slot.y_overlap,Math.abs(panel_x-slot_x)),changeY=Math.abs(panel_y-slot_y);0===changeX&&slot_y>panel_y&&panel_y_overlap?element.hasClass("card-moving")||element.css({left:_startCol+moveX+"px",top:_startRow+moveY+"px"}):(changeX>0||changeY>0)&&("top"===crossingEdge(mouseX,mouseY)?vectorX>0&&!slot_x_overlap&&!panel_x_overlap?scope.$emit("cardSlot:moveDiagonalUp",{slot:slot,panel:panel}):0!==changeX||panel_y_overlap?scope.$emit("cardSlot:moveHorizontal",{slot:slot,panel:panel}):scope.$emit("cardSlot:moveVertical",{slot:slot,panel:panel}):"bottom"===crossingEdge(mouseX,mouseY)?changeX>0&&_x_dim>=changeX?scope.$emit("cardSlot:moveDiagonalDown",{slot:slot,panel:panel}):0!==changeX||panel_y_overlap?scope.$emit("cardSlot:moveHorizontal",{slot:slot,panel:panel}):scope.$emit("cardSlot:moveVertical",{slot:slot,panel:panel}):("left"===crossingEdge(mouseX,mouseY)||"right"===crossingEdge(mouseX,mouseY))&&(2*vectorY>vectorX?0>moveY?scope.$emit("cardSlot:moveDiagonalUp",{slot:slot,panel:panel}):moveY>0&&scope.$emit("cardSlot:moveDiagonalDown",{slot:slot,panel:panel}):scope.$emit("cardSlot:moveHorizontal",{slot:slot,panel:panel})))},onRelease=function(){$document.off(_moveEvents,onMove),$document.off(_releaseEvents,onRelease),$rootScope.$broadcast("cardPanel:onReleaseCard",{panel:_card}),_moveX<=convertEm(1)&&_moveX>=-convertEm(1)&&_moveY<=convertEm(1)&&_moveY>=-convertEm(1)&&$rootScope.$broadcast("cardPanel:toggleOverlap",{panel:_card})},onReleaseCard=function(){element.addClass("card-moving"),setTimeout(function(){element.css({left:_card.x_coord+"em",top:_card.y_coord+"em"})},0),clearTimeout(_moveTimer),_moveTimer=setTimeout(function(){element.removeClass("card-moving")},600)},onMouseLeave=function(){$document.off(_moveEvents,onMove),$document.off(_releaseEvents,onRelease),$rootScope.$broadcast("cardPanel:onReleaseCard",{panel:_card})},crossingEdge=function(mouseX,mouseY){var cardOffset=element.offset(),slotX=cardOffset.left,slotY=cardOffset.top,leftEdge=_card.x_overlap?slotX+_x_cover:slotX,rightEdge=slotX+_x_dim,topEdge=slotY,bottomEdge=_card.y_overlap?slotY+_y_tab:slotY+_y_dim;if(mouseX>=leftEdge&&rightEdge>=mouseX&&mouseY>=topEdge&&bottomEdge>=mouseY){var left=mouseX-leftEdge,right=rightEdge-mouseX,top=mouseY-topEdge,bottom=bottomEdge-mouseY,edges=[left,right,top,bottom],closestEdge=Math.min.apply(Math.min,edges),edgeNames=["left","right","top","bottom"],edgeName=edgeNames[edges.indexOf(closestEdge)];return edgeName}};initialize()}}}]),angular.module("core").directive("modalDialogWindow",function(){return{restrict:"E",scope:{show:"="},transclude:!0,templateUrl:"../modules/core/views/modal-window.html",link:function(scope,element,attrs){scope.dialogStyle={},attrs.width&&(scope.dialogStyle.width=attrs.width),attrs.height&&(scope.dialogStyle.height=attrs.height),scope.hideModal=function(){scope.show=!1}}}});var coreModule=angular.module("core");coreModule.directive("screenSize",["$rootScope","$window",function($rootScope,$window){return{restrict:"A",link:function(scope){var _windowHeight,_window=angular.element($window),initialize=function(){toggleListeners(!0),setTimeout(function(){onHeightChange()},0)},toggleListeners=function(enable){enable&&(scope.$on("$destroy",onDestroy),_window.on("resize",onHeightChange))},onDestroy=function(){toggleListeners(!1)},onHeightChange=function(){_windowHeight=_window.height(),$rootScope.$broadcast("screenSize:onHeightChange",{newHeight:_windowHeight})};angular.element(document).ready(function(){initialize()}),initialize()}}}]);var coreModule=angular.module("core");coreModule.factory("CardDeck",["Cards","HomeDemo","Pcs","$rootScope",function(Cards,HomeDemo,Pcs,$rootScope){var service={};service.windowHeight=0;var moveTimer,x_dim=15,y_dim=21,y_tab=3,x_cover=12,y_cover=18,_moveSpeed=800,cardMoved=!1,cardMoving=!1,getCardList=function(deckType){return"pc"===deckType?Pcs.pc.cards:"card"===deckType?Cards.cardList:"home"===deckType?HomeDemo.cards:void 0},getCardIndex=function(deckType,x_coord,y_coord){for(var _deck=getCardList(deckType),i=0;i<_deck.length;i++)if(_deck[i].x_coord===x_coord&&_deck[i].y_coord===y_coord)return i},getFirstIndex=function(deckType){return getCardIndex(deckType,0,0)};service.getLastIndex=function(deckType){for(var _deck=getCardList(deckType),_card={},_last=0,i=0;i<_deck.length;i++)_deck[i].x_coord>(_card.x_coord||0)&&(_last=i,_card=_deck[i]);return _last},service.getDeckWidth=function(deckType){var _deck=getCardList(deckType);return _deck[service.getLastIndex(deckType)].x_coord+x_dim};var setDeckWidth=function(deckType){var _deck=getCardList(deckType),_deckWidth=_deck[service.getLastIndex(deckType)].x_coord+x_dim;$rootScope.$broadcast("CardDeck:setDeckWidth",{deckWidth:_deckWidth})},getLastIndex=function(cardType){for(var _deck=getCardList(cardType),_card={},_last=0,i=0;i<_deck.length;i++)_deck[i].x_coord>(_card.x_coord||0)&&(_last=i,_card=_deck[i]);return _last},getLowestIndex=function(cardType,x_coord){for(var _deck=getCardList(cardType),_card={},_lowest=0,i=0;i<_deck.length;i++)_deck[i].x_coord===x_coord&&_deck[i].y_coord>(_card.y_coord||-1)&&(_lowest=i,_card=_deck[i]);return _lowest},setColumn=function(cardType,x_coord){var _deck=getCardList(cardType),lowest_index=getLowestIndex(cardType,x_coord),lowest_y_coord=_deck[lowest_index].y_coord;if(lowest_y_coord>0)for(var i=0;i<_deck.length;i++)_deck[i].x_coord===x_coord&&(_deck[i].stacked=!0,_deck[i].y_overlap=_deck[i].y_coord<lowest_y_coord?!0:!1);else _deck[lowest_index].stacked=!1,_deck[lowest_index].y_overlap=!1},initialize=function(){toggleListeners(!0)},toggleListeners=function(enable){enable&&($rootScope.$on("$destroy",onDestroy),$rootScope.$on("screenSize:onHeightChange",onHeightChange),$rootScope.$on("cardPanel:onPressCard",onPressCard),$rootScope.$on("cardPanel:onReleaseCard",onReleaseCard),$rootScope.$on("cardPanel:toggleOverlap",toggleOverlap),$rootScope.$on("cardSlot:moveHorizontal",moveHorizontal),$rootScope.$on("cardSlot:moveDiagonalUp",moveDiagonalUp),$rootScope.$on("cardSlot:moveDiagonalDown",moveDiagonalDown),$rootScope.$on("cardSlot:moveVertical",moveVertical),$rootScope.$on("cardDeck:unstackLeft",unstackLeft),$rootScope.$on("cardDeck:unstackRight",unstackRight))},onDestroy=function(){toggleListeners(!1)},onHeightChange=function(event,object){service.windowHeight=object.newHeight},setCardMoving=function(interval,deckType){clearTimeout(moveTimer),cardMoving=!0,cardMoved=!0,moveTimer=setTimeout(function(){cardMoving=!1,setDeckWidth(deckType)},interval)},onPressCard=function(event,object){var panel=object.panel,_deckType=panel.deckType,_deck=getCardList(_deckType),panel_x=panel.x_coord,panel_y=panel.y_coord,panel_index=getCardIndex(_deckType,panel_x,panel_y);if(cardMoved=!1,_deck[panel_index].y_overlap)for(var ia=0;ia<_deck.length;ia++)_deck[ia].x_coord===panel_x&&_deck[ia].y_coord>=panel_y&&(_deck[ia].dragging=!0);else _deck[panel_index].dragging=!0;$rootScope.$digest()},onReleaseCard=function(event,object){{var panel=object.panel,_deckType=panel.deckType,_deck=getCardList(_deckType);getCardIndex(_deckType,panel.x_coord,panel.y_coord)}cardMoved=!1;for(var ia=0;ia<_deck.length;ia++)_deck[ia].dragging=!1;$rootScope.$digest()},moveHorizontal=function(event,object){{var _slot=object.slot,_panel=object.panel,_deckType=_panel.deckType;getCardList(_deckType),getLowestIndex(_deckType,_panel.x_coord)}_panel.y_coord>0||0===_panel.y_coord&&_panel.stacked&&!_panel.y_overlap?unstackCard(_slot,_panel):0===_panel.y_coord&&0===_slot.y_coord&&switchHorizontal(_slot,_panel)},moveDiagonalUp=function(event,object){{var _slot=object.slot,_panel=object.panel,_deckType=_slot.deckType;getCardList(_deckType),getLowestIndex(_deckType,_panel.x_coord)}0===_panel.y_coord?stackUnder(_slot,_panel):unstackCard(_slot,_panel)},moveDiagonalDown=function(event,object){{var _slot=object.slot,_panel=object.panel,_deckType=_slot.deckType;getCardList(_deckType),getLowestIndex(_deckType,_panel.x_coord)}0===_panel.y_coord?stackOver(_slot,_panel):unstackCard(_slot,_panel)},moveVertical=function(event,object){switchVertical(object.slot,object.panel)},unstackLeft=function(event,object){if(object.panel.y_coord>0){var _panel=object.panel,_deckType=_panel.deckType,_deck=getCardList(_deckType),unstack_coord=_deck[getFirstIndex(_deckType)].x_coord-x_dim;unstackCard({x_coord:unstack_coord},_panel)}},unstackRight=function(event,object){if(object.panel.y_coord>0){var _panel=object.panel,_deckType=_panel.deckType,_deck=getCardList(_deckType),unstack_coord=_deck[getLastIndex(_deckType)].x_coord+x_dim;unstackCard({x_coord:unstack_coord},_panel)}},switchHorizontal=function(slot,panel){if(!cardMoving){var _deckType=panel.deckType,_deck=getCardList(_deckType),slot_x=slot.x_coord,slot_y=slot.y_coord,slot_index=getCardIndex(_deckType,slot_x,slot_y),slot_x_overlap=slot.x_overlap,slot_position=slot_x,panel_x=panel.x_coord,panel_y=panel.y_coord,panel_index=getCardIndex(_deckType,panel_x,panel_y),panel_x_overlap=panel.x_overlap,panel_width=x_dim;if(0===slot_y&&0===panel_y)if(panel_x-slot_x>0){setCardMoving(_moveSpeed,_deckType),0===slot_x&&panel_x_overlap?(slot_position=0,panel_width-=x_cover,_deck[slot_index].x_overlap=!0,_deck[panel_index].x_overlap=!1):(panel_x_overlap&&(panel_width-=x_cover,slot_position-=x_cover),slot_x_overlap&&(slot_position+=x_cover));for(var ia=0;ia<_deck.length;ia++)_deck[ia].x_coord>=slot_x&&_deck[ia].x_coord<panel_x?_deck[ia].x_coord+=panel_width:_deck[ia].x_coord===panel_x&&(_deck[ia].x_coord=slot_position)}else if(0>panel_x-slot_x){if(setCardMoving(_moveSpeed,_deckType),0===panel_x&&slot_x_overlap){var first_index=getFirstIndex(_deckType);_deck[first_index].x_overlap=!1,_deck[panel_index].x_overlap=!0,panel_width-=x_cover}else panel_x>0&&panel_x_overlap&&(panel_width-=x_cover);for(var ib=0;ib<_deck.length;ib++)_deck[ib].x_coord<=slot_x&&_deck[ib].x_coord>panel_x?_deck[ib].x_coord-=panel_width:_deck[ib].x_coord===panel_x&&(_deck[ib].x_coord=slot_position)}$rootScope.$digest()}},switchVertical=function(slot,panel){if(!cardMoving){{var _deckType=slot.deckType,_deck=getCardList(_deckType),slot_x=slot.x_coord,slot_y=slot.y_coord,slot_index=getCardIndex(_deckType,slot_x,slot_y),slot_y_overlap=slot.y_overlap,panel_x=panel.x_coord,panel_y=panel.y_coord,panel_index=getCardIndex(_deckType,panel_x,panel_y),panel_y_overlap=panel.y_overlap,lowest_index=getLowestIndex(_deckType,slot_x);_deck[lowest_index].y_coord}panel_y-slot_y>0?(setCardMoving(_moveSpeed,_deckType),_deck[slot_index].y_coord=panel_y,_deck[slot_index].y_overlap=panel_y_overlap,$rootScope.$digest(),_deck[panel_index].y_coord=slot_y,_deck[panel_index].y_overlap=slot_y_overlap):0>panel_y-slot_y&&(setCardMoving(_moveSpeed,_deckType),_deck[slot_index].y_coord=panel_y,_deck[slot_index].y_overlap=panel_y_overlap,$rootScope.$digest(),_deck[panel_index].y_coord=slot_y,_deck[panel_index].y_overlap=slot_y_overlap),$rootScope.$digest()}},stackOver=function(slot,panel){if(!cardMoving&&!slot.x_overlap&&!panel.x_overlap){var _deckType=slot.deckType,_deck=getCardList(_deckType),slot_x=slot.x_coord,slot_y=slot.y_coord,slot_x_overlap=(getCardIndex(_deckType,slot_x,slot_y),slot.x_overlap),panel_x=(slot.y_overlap,panel.x_coord),panel_y=panel.y_coord,panel_x_overlap=(getCardIndex(_deckType,panel_x,panel_y),panel.x_overlap),panel_lowest_index=(panel.y_overlap,getLowestIndex(_deckType,panel_x)),panel_lowest_coord=_deck[panel_lowest_index].y_coord,newColumn=panel_x>slot_x?slot_x:slot_x-x_dim;if(!slot_x_overlap&&!panel_x_overlap){setCardMoving(_moveSpeed,_deckType);for(var ia=0;ia<_deck.length;ia++)!_deck[ia].dragging&&_deck[ia].x_coord===newColumn&&_deck[ia].y_coord>slot_y&&(_deck[ia].y_coord+=panel_lowest_coord+y_tab),_deck[ia].dragging&&(_deck[ia].x_coord=slot_x,_deck[ia].y_coord+=slot_y+y_tab-panel_y),_deck[ia].x_coord>panel_x&&0===panel_y&&(_deck[ia].x_coord-=x_dim);setColumn(_deckType,newColumn),setColumn(_deckType,slot_x),setColumn(_deckType,panel_x)}$rootScope.$digest()}},stackUnder=function(slot,panel){if(!cardMoving&&!slot.x_overlap&&!panel.x_overlap){var _deckType=slot.deckType,_deck=getCardList(_deckType),panel_x=panel.x_coord,panel_y=panel.y_coord,panel_lowest_coord=(getCardIndex(_deckType,panel_x,panel_y),panel.x_overlap,panel.y_overlap,_deck[getLowestIndex(_deckType,panel_x)].y_coord),slot_x=slot.x_coord,slot_y=slot.y_coord,newColumn=(getCardIndex(_deckType,slot_x,slot_y),_deck[getLowestIndex(_deckType,slot_x)].y_coord,panel_x>slot_x?slot_x:slot_x-x_dim);
setCardMoving(_moveSpeed,_deckType);for(var ia=0;ia<_deck.length;ia++)_deck[ia].dragging||_deck[ia].x_coord!==slot_x||(_deck[ia].y_coord+=panel_lowest_coord+y_tab),_deck[ia].x_coord>panel_x&&(_deck[ia].x_coord-=x_dim),_deck[ia].dragging&&(_deck[ia].x_coord=newColumn);setColumn(_deckType,newColumn-x_dim),setColumn(_deckType,slot_x),setColumn(_deckType,panel_x),$rootScope.$digest()}},unstackCard=function(slot,panel){if(!cardMoving){var _deckType=panel.deckType,_deck=getCardList(_deckType);if(_deck[getLowestIndex(_deckType,panel.x_coord)].y_coord>0){var new_slot_index,new_panel_index,panel_x=panel.x_coord,panel_y=panel.y_coord,panel_index=getCardIndex(_deckType,panel_x,panel_y),panel_y_overlap=(panel.x_overlap,panel.y_overlap),slot_x=slot.x_coord;if(panel_x-slot_x>0){if(setCardMoving(_moveSpeed,_deckType),panel_y_overlap)for(var ia=0;ia<_deck.length;ia++)_deck[ia].x_coord>panel_x&&(_deck[ia].x_coord+=x_dim),_deck[ia].x_coord===panel_x&&panel_y_overlap&&(_deck[ia].y_coord<panel_y?_deck[ia].x_coord+=x_dim:_deck[ia].y_coord>=panel_y&&(_deck[ia].y_coord-=panel_y));else if(!panel_y_overlap){for(var ib=0;ib<_deck.length;ib++)_deck[ib].x_coord>=panel_x&&(_deck[ib].x_coord===panel_x&&_deck[ib].y_coord>panel_y&&(_deck[ib].y_coord-=y_dim),ib!==panel_index&&(_deck[ib].x_coord+=x_dim));_deck[panel_index].y_coord=0,_deck[panel_index].stacked=!1}new_slot_index=getLowestIndex(_deckType,panel_x),new_panel_index=getLowestIndex(_deckType,panel_x+x_dim),_deck[new_slot_index].y_overlap=!1,0===_deck[new_slot_index].y_coord&&(_deck[new_slot_index].stacked=!1),_deck[new_panel_index].y_overlap=!1,0===_deck[new_panel_index].y_coord&&(_deck[new_panel_index].stacked=!1)}else if(0>panel_x-slot_x&&!cardMoving){if(setCardMoving(_moveSpeed,_deckType),panel_y_overlap)for(var ic=0;ic<_deck.length;ic++)_deck[ic].x_coord>panel_x&&(_deck[ic].x_coord+=x_dim),_deck[ic].x_coord===panel_x&&_deck[ic].y_coord>=panel_y&&(_deck[ic].x_coord+=x_dim,_deck[ic].y_coord-=panel_y);else if(!panel_y_overlap){for(var id=0;id<_deck.length;id++)_deck[id].x_coord>panel_x&&(_deck[id].x_coord+=x_dim),_deck[id].x_coord===panel_x&&_deck[id].y_coord>panel_y&&(_deck[id].y_coord-=y_dim);_deck[panel_index].x_coord+=x_dim,_deck[panel_index].y_coord=0}new_slot_index=getLowestIndex(_deckType,panel_x),new_panel_index=getLowestIndex(_deckType,slot_x),_deck[new_slot_index].y_overlap=!1,0===_deck[new_slot_index].y_coord&&(_deck[new_slot_index].stacked=!1),_deck[new_panel_index].y_overlap=!1,0===_deck[new_panel_index].y_coord&&(_deck[new_panel_index].stacked=!1)}}$rootScope.$digest()}},toggleOverlap=function(event,object){if(!cardMoved){var panel=object.panel,_deckType=panel.deckType,_deck=getCardList(_deckType),panel_x=panel.x_coord,panel_y=panel.y_coord,panel_x_overlap=panel.x_overlap,panel_y_overlap=panel.y_overlap,panel_index=getCardIndex(_deckType,panel_x,panel_y),lowest_index=getLowestIndex(_deckType,panel_x),lowest_y=_deck[lowest_index].y_coord;if(panel_x>0&&0===lowest_y){if(panel_x_overlap&&!cardMoving){setCardMoving(_moveSpeed,_deckType),_deck[panel_index].x_overlap=!1;for(var ia=0;ia<_deck.length;ia++)panel_x<=_deck[ia].x_coord&&(_deck[ia].x_coord+=x_cover)}else if(!panel_x_overlap&&!cardMoving){setCardMoving(_moveSpeed,_deckType),_deck[panel_index].x_overlap=!0;for(var ib=0;ib<_deck.length;ib++)panel_x<=_deck[ib].x_coord&&(_deck[ib].x_coord-=x_cover)}}else if(panel_y!==lowest_y)if(panel_y_overlap&&!cardMoving){setCardMoving(_moveSpeed,_deckType),_deck[panel_index].y_overlap=!1;for(var ic=0;ic<_deck.length;ic++)panel_x===_deck[ic].x_coord&&panel_y<_deck[ic].y_coord&&(_deck[ic].y_coord+=y_cover)}else if(!panel_y_overlap&&!cardMoving){setCardMoving(_moveSpeed,_deckType),_deck[panel_index].y_overlap=!0;for(var id=0;id<_deck.length;id++)panel_x===_deck[id].x_coord&&panel_y<_deck[id].y_coord&&(_deck[id].y_coord-=y_cover)}$rootScope.$digest(),cardMoved=!1}};return initialize(),service}]),angular.module("core").factory("DataSRVC",[function(){var service={};return service.sexArray=["---","Male","Female"],service.diceList=[{order:1,name:"d__",sides:0,image:"modules/core/img/d___.png"},{order:2,name:"d4",sides:4,image:"modules/core/img/d_04.png"},{order:3,name:"d6",sides:6,image:"modules/core/img/d_06.png"},{order:4,name:"d6",sides:6,image:"modules/core/img/d_06.png"},{order:5,name:"d8",sides:8,image:"modules/core/img/d_08.png"},{order:6,name:"d8",sides:8,image:"modules/core/img/d_08.png"},{order:7,name:"d10",sides:10,image:"modules/core/img/d_10.png"},{order:8,name:"d10",sides:10,image:"modules/core/img/d_10.png"},{order:9,name:"d12",sides:12,image:"modules/core/img/d_12.png"}],service.targetTypes=["Utility","Close","Close Area","Distant","Distant Area"],service.closeDetails=["1/1","1/2","1/3","1/4","2/1","2/2","2/3","2/4","3/1","3/2","3/3","3/4","4/1","4/2","4/3"],service.closeAreaDetails=["2x2","3x3","4x4","5x5"],service.distantDetails=["4/1","6/1","8/1","10/1","12/1","14/1","16/1","18/1","20/1","22/1","24/1"],service.distantAreaDetails=["8/2x2","10/2x2","12/2x2","16/2x2","10/3x3","12/3x3","16/3x3","20/3x3","12/4x4","16/4x4","20/4x4"],service.actionKeywords=["Default","Single-use","Thrown","Reflexive","Melee","Ranged","Evocation","Invocation"],service.actionFrequency=["Free","Count: 1","Count: 2","Count: 3","Count: 4","Count: 5","Disruptive","Responsive"],service.dice=["1d4","1d6","1d8","1d10","1d12"],service.abilities=["STR","PHY","FLE","DEX","ACU","INT","WIS","CHA"],service.attackTypes=["Melee","Ranged","Evocation","Invocation"],service.defenseTypes=["Block","Dodge","Alertness","Tenacity"],service.prerequisites=["1d10 STR","1d10 PHY","1d10 FLE","1d10 DEX","1d10 ACU","1d10 INT","1d10 WIS","1d10 CHA"],service.archetypes=["General","Guardian","Hunter","Mastermind","Champion"],service.allegiances=["Unaligned","Nymaria","Vakhelos","Heresy","Inquisition"],service.races=["Weolda","Algharr","Durhok","Feyal","Sylthaun"],service.itemTypes=["Melee","Melee / Ranged","Melee / Invocation","Ranged","Ranged / Melee","Ranged / Evocation","Evocation","Evocation / Invocation","Evocation / Ranged","Invocation","Invocation / Evocation","Invocation / Melee"],service.itemSlots=["One-handed","Two-handed","One-handed or Paired","One-handed or Two-handed","Armor","Shield","Gloves","Boots","Cloak","Amulet","Ring","Belt","Helmet","Consumable","Provision"],service}]);var coreModule=angular.module("core");coreModule.factory("HomeDemo",["$rootScope",function(){var service={};return service.cards=[{name:"A Trait Card",cardType:"trait",deckType:"home",x_coord:0,y_coord:0,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!1,locked:!0},{name:"A Feat Card",cardType:"feat",deckType:"home",x_coord:15,y_coord:0,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!1,locked:!0},{name:"An Augment Card",cardType:"augment",deckType:"home",x_coord:30,y_coord:0,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!1,locked:!0,description:{show:!0,content:"Truly amazing..."}},{name:"An Item Card",cardType:"item",deckType:"home",x_coord:45,y_coord:0,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!1,locked:!0},{name:"Another Feat Card",cardType:"feat",deckType:"home",x_coord:60,y_coord:0,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!1,locked:!0},{name:"Another Item Card",cardType:"item",deckType:"home",x_coord:75,y_coord:0,x_overlap:!1,y_overlap:!0,dragging:!1,stacked:!0,locked:!0,description:{show:!0,content:"This is the best one by far!!"}},{name:"Yet Another Feat Card",cardType:"feat",deckType:"home",x_coord:75,y_coord:3,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!0,locked:!0}],service}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("narrator").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Narrator","narrator","dropdown","/narrator(/npcs)?",!0,["user"],"1"),Menus.addSubMenuItem("topbar","narrator","List My NPCs","narrator/npcs")}]),angular.module("narrator").config(["$stateProvider",function($stateProvider){$stateProvider.state("listNpcs",{url:"/narrator/npcs",templateUrl:"modules/narrator/views/list-npcs.client.view.html"})}]),angular.module("narrator").controller("NpcsController",["$scope","$stateParams","$location","Authentication","Npcs",function($scope,$stateParams,$location,Authentication,Npcs){$scope.authentication=Authentication,$scope.create=function(){var npc=new Npcs({name:this.name});npc.$save(function(response){$location.path("npcs/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(npc){if(npc){npc.$remove();for(var i in $scope.npcs)$scope.npcs[i]===npc&&$scope.npcs.splice(i,1)}else $scope.npc.$remove(function(){})},$scope.update=function(){var npc=$scope.npc;npc.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.npcs=Npcs.query(function(response){console.log(response)})},$scope.findOne=function(){$scope.npc=Npcs.get({npcId:$stateParams.npcId})}}]),angular.module("narrator").factory("Npcs",["$resource",function($resource){return $resource("npcs/:npcId",{npcId:"@_id"},{update:{method:"PUT"}})}]),angular.module("player").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Player","player","dropdown","/player(/pcs)?",!0,["user"],"0"),Menus.addSubMenuItem("topbar","player","List My PCs","player/pcs")}]),angular.module("player").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPcs",{url:"/player/pcs",templateUrl:"modules/player/views/list-pcs.client.view.html"}).state("editPc",{url:"/player/pcs/:pcId/edit",templateUrl:"modules/player/views/edit-pc.client.view.html"})}]),angular.module("player").controller("PcsCtrl",["$scope","$location","$log","$rootScope","$window","DataSRVC","CardDeck","Pcs","PcsCard1","PcsCard2","PcsCard3","PcsTraits","PcsFeats","PcsAugments","PcsItems",function($scope,$location,$log,$rootScope,$window,DataSRVC,CardDeck,Pcs,PcsCard1,PcsCard2,PcsCard3,PcsTraits,PcsFeats,PcsAugments,PcsItems){angular.element($window);$scope.windowHeight=0,$scope.windowScale=0,$scope.dataSRVC=DataSRVC,$scope.cardDeck=CardDeck,$scope.pcs=Pcs,$scope.pcsCard1=PcsCard1,$scope.pcsCard2=PcsCard2,$scope.pcsCard3=PcsCard3,$scope.pcsTraits=PcsTraits,$scope.pcsFeats=PcsFeats,$scope.pcsAugments=PcsAugments,$scope.pcsItems=PcsItems,$scope.status={dropdownOpen:!1},$scope.toggleOverlay=function(){$scope.status.dropdownOpen=!$scope.status.dropdownOpen},$scope.newPc=function(){Pcs.addPc(),Pcs.pcNew=!0,Pcs.pcSaved=!1},$scope.openPc=function(pc){$location.path("player/pcs/"+pc._id+"/edit"),Pcs.pcNew=!1,Pcs.pcSaved=!1},$scope.savePc=function(){Pcs.editPc(),Pcs.pcNew=!1,Pcs.pcSaved=!0},$scope.exitPc=function(){Pcs.pcNew&&Pcs.deletePc(),$location.path("player/pcs")};var initialize=function(){toggleListeners(!0)},toggleListeners=function(enable){enable&&($scope.$on("$destroy",onDestroy),$scope.$on("screenSize:onHeightChange",onHeightChange),$scope.$on("pcsCard1:updateAbility",updateAbility),$scope.$watch("pcsCard2.EXP",watchEXP),$scope.$watch("pcs.pc.experience",watchExperience),$scope.$watch("pcs.pc.level",watchLevel))},onDestroy=function(){toggleListeners(!1)},onHeightChange=function(event,object){$scope.windowHeight=object.newHeight,$scope.windowScale=object.newScale,$scope.$digest()};$scope.status={isopen:!1},$scope.toggled=function(open){$scope.status.isopen=open,console.log($scope.status.isopen),$rootScope.$broadcast("CardsCtrl:onDropdown",{isOpen:$scope.status.isopen})};var updateAbility=function(event,object){var abilityPair=object.abilityPair,ability1=object.ability1,ability2=object.ability2;switch(abilityPair){case 1:PcsCard1.factorBlock(ability1,ability2),PcsCard2.factorHealth(),PcsCard2.factorStamina(),PcsCard2.factorCarryingCapacity();break;case 2:PcsCard1.factorDodge(ability1,ability2);break;case 3:PcsCard1.factorAlertness(ability1,ability2);break;case 4:PcsCard1.factorTenacity(ability1,ability2)}},watchEXP=function(newValue,oldValue){Pcs.pc&&newValue!==oldValue&&(PcsCard2.EXP=parseInt(newValue),Pcs.pc.experience=parseInt(newValue))},watchExperience=function(newValue,oldValue){Pcs.pc&&newValue!==oldValue&&(PcsCard2.factorExperience(),newValue!==PcsCard2.EXP&&(PcsCard2.EXP=newValue))},watchLevel=function(){Pcs.pc.abilities&&(PcsCard2.factorHealth(),PcsCard2.factorStamina(),PcsTraits.factorTraitLimit(),PcsFeats.factorFeatLimit(),PcsAugments.factorAugmentLimit())};initialize()}]),angular.module("player").directive("diceBox",["$window","CardDeck",function($window){return{restrict:"A",templateUrl:"../modules/player/views/dice-box.html",link:function(scope,element){var initialize=function(){element.attr("draggable","false"),toggleListeners(!0)},toggleListeners=function(enable){enable&&(scope.$on("$destroy",onDestroy),scope.$on("ability:onPress",setPosition),scope.$on("ability:setPosition",setPosition))},onDestroy=function(){toggleListeners(!1)},setPosition=function(event,object){var _caret=object.caret,_topEdge=object.topEdge,_leftEdge=object.leftEdge;element.removeClass("top-caret"),element.removeClass("bottom-caret"),element.addClass(_caret),element.css({top:_topEdge+"px",left:_leftEdge+"px"})};initialize()}}}]).directive("ability",["$parse","$rootScope","$window","CardDeck","PcsCard1",function($parse,$rootScope,$window,CardDeck,PcsCard1){return{restrict:"A",link:function(scope,element,attrs){var _ability=$parse(attrs.ability)||null,_pressEvents="touchstart mousedown",initialize=function(){element.attr("draggable","false"),toggleListeners(!0),onHeightChange()},toggleListeners=function(enable){enable&&(scope.$on("$destroy",onDestroy),scope.$watch(attrs.ability,onAbilityChange),scope.$on("screenSize:onHeightChange",onHeightChange),element.on(_pressEvents,onPress))},onDestroy=function(){toggleListeners(!1)},getElementFontSize=function(){return parseFloat($window.getComputedStyle(element[0],null).getPropertyValue("font-size"))},convertEm=function(value){return value*getElementFontSize()},onAbilityChange=function(newVal){_ability=newVal},getPosition=function(){var offset=element.offset(),caret=_ability.order<4?"top-caret":"bottom-caret",topEdge=_ability.order<4?offset.top+convertEm(3):offset.top-convertEm(9),leftEdge=offset.left-convertEm(.5);return{caret:caret,topEdge:topEdge,leftEdge:leftEdge,ability:_ability}},onHeightChange=function(){_ability.order===PcsCard1.chosenAbility.order&&$rootScope.$broadcast("ability:setPosition",getPosition())},onPress=function(){$rootScope.$broadcast("ability:onPress",getPosition())};initialize()}}}]),angular.module("player").factory("PcsAugments",["Pcs","CardDeck",function(Pcs,CardDeck){var service={};return service.factorAugmentLimit=function(){Pcs.pc.augmentLimit=Math.round((Pcs.pc.level||0)/4),this.validateAugments()},service.validateAugments=function(){for(var ia=0;ia<Pcs.pc.augmentLimit;ia++)this.augmentAtLevel(4*ia+2)||this.addAugment(4*ia+2);for(var ic=0;ic<Pcs.pc.cards.length;ic++)Pcs.pc.cards[ic].level>Pcs.pc.level&&CardDeck.removeCard(ic)},service.augmentAtLevel=function(level){for(var augmentAtLevel=!1,ib=0;ib<Pcs.pc.cards.length;ib++)"augment"===Pcs.pc.cards[ib].cardType&&Pcs.pc.cards[ib].level===level&&(augmentAtLevel=!0);return augmentAtLevel},service.addAugment=function(level){var newAugment={name:"Level "+level+" Augment",cardType:"augment",x_coord:Pcs.pc.cards[Pcs.lastCard()].x_coord+15,y_coord:0,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!1,locked:!0,level:level};Pcs.pc.cards.push(newAugment)},service}]),angular.module("player").factory("PcsCard1",["$rootScope","Pcs",function($rootScope,Pcs){var service={};return service.diceBoxShown=!1,service.chosenDie={},service.previousDie={},service.chosenAbility={},service.hideDiceModal=function(){console.log("hide me"),service.diceBoxShown=!service.diceBoxShown},service.chooseAbility=function(ability){service.chosenAbility=Pcs.pc.abilities[ability]},$rootScope.$on("ability:onPress",function(event,object){service.chosenAbility=Pcs.pc.abilities[object.ability.order],service.diceBoxShown=!0,console.log(object)}),service.chooseDie=function(dice){service.diceBoxShown=!1;var _abilityPair,_ability1,_ability2;switch(this.chosenDie=Pcs.pc.dicepool[dice],this.previousDie=this.chosenAbility.dice,Pcs.pc.dicepool[dice]=Pcs.pc.dicepool[0],this.previousDie.order>0&&(Pcs.pc.dicepool[this.previousDie.order]=this.previousDie),Pcs.pc.abilities[this.chosenAbility.order].dice=this.chosenDie,this.chosenAbility.order){case 0:case 1:_abilityPair=1,_ability1=Pcs.pc.abilities[0],_ability2=Pcs.pc.abilities[1];break;case 2:case 3:_abilityPair=2,_ability1=Pcs.pc.abilities[2],_ability2=Pcs.pc.abilities[3];break;case 4:case 5:_abilityPair=3,_ability1=Pcs.pc.abilities[4],_ability2=Pcs.pc.abilities[5];break;case 6:case 7:_abilityPair=4,_ability1=Pcs.pc.abilities[6],_ability2=Pcs.pc.abilities[7]}$rootScope.$broadcast("pcsCard1:updateAbility",{abilityPair:_abilityPair,ability1:_ability1,ability2:_ability2})},service.factorBlock=function(_str,_phy){Pcs.pc.block=Number(_str.dice.sides)>Number(_phy.dice.sides)?"2"+_str.dice.name:"2"+_phy.dice.name},service.factorDodge=function(_fle,_dex){Pcs.pc.dodge=Number(_fle.dice.sides)>Number(_dex.dice.sides)?"2"+_fle.dice.name:"2"+_dex.dice.name},service.factorAlertness=function(_acu,_int){Pcs.pc.alertness=Number(_acu.dice.sides)>Number(_int.dice.sides)?"2"+_acu.dice.name:"2"+_int.dice.name},service.factorTenacity=function(_wis,_cha){Pcs.pc.tenacity=Number(_wis.dice.sides)>Number(_cha.dice.sides)?"2"+_wis.dice.name:"2"+_cha.dice.name},service}]),angular.module("player").factory("PcsCard2",["$rootScope","Pcs",function($rootScope,Pcs){var service={};return service.EXP=0,Pcs.pc&&(service.EXP=Pcs.pc.experience),service.factorExperience=function(){for(var mLevel=0,mExperience=Number(Pcs.pc.experience),increment=8;mExperience>=increment;increment++)mLevel++,mExperience-=increment;Pcs.pc.level=mLevel},service.factorHealth=function(){Pcs.pc.healthLimit=Math.round((Number(Pcs.pc.abilities[0].dice.sides)+Number(Pcs.pc.abilities[1].dice.sides))*((Pcs.pc.level||0)/16+1)),Pcs.pc.healthCurrent=Number(Pcs.pc.healthLimit-Pcs.pc.injury)},service.factorStamina=function(){Pcs.pc.staminaLimit=Math.round((Number(Pcs.pc.abilities[0].dice.sides)+Number(Pcs.pc.abilities[1].dice.sides))*((Pcs.pc.level||0)/16+1)),Pcs.pc.staminaCurrent=Number(Pcs.pc.healthLimit-Pcs.pc.injury)},service.factorCarryingCapacity=function(){Pcs.pc.carryCurrent=0,Pcs.pc.carryLimit=Number(Pcs.pc.abilities[0].dice.sides)+Number(Pcs.pc.abilities[1].dice.sides)},service}]),angular.module("player").factory("PcsCard3",["$rootScope","Pcs",function(){var service={};return service}]),angular.module("player").factory("PcsFeats",["Pcs","CardDeck",function(Pcs,CardDeck){var service={};return service.factorFeatLimit=function(){Pcs.pc.featLimit=Math.ceil(Pcs.pc.level/4)||0,Pcs.pc.featDeck=Pcs.pc.level,this.validateFeats()},service.validateFeats=function(){for(var ia=0;ia<Pcs.pc.featDeck;ia++)this.featAtLevel(ia+1)||this.addFeat(ia+1);for(var ic=0;ic<Pcs.pc.cards.length;ic++)Pcs.pc.cards[ic].level>Pcs.pc.level&&CardDeck.removeCard(Pcs.pc.cards[ic])},service.featAtLevel=function(level){for(var featAtLevel=!1,ib=0;ib<Pcs.pc.cards.length;ib++)"feat"===Pcs.pc.cards[ib].cardType&&Pcs.pc.cards[ib].level===level&&(featAtLevel=!0);return featAtLevel},service.addFeat=function(level){var newFeat={name:"Level "+level+" Feat",cardType:"feat",x_coord:Pcs.pc.cards[Pcs.lastCard()].x_coord+15,y_coord:0,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!1,locked:!0,level:level};Pcs.pc.cards.push(newFeat)},service}]),angular.module("player").factory("PcsItems",["Pcs",function(){var service={};return service}]),angular.module("player").factory("PcsTraits",["Pcs","CardDeck",function(Pcs,CardDeck){var service={};return service.factorTraitLimit=function(){Pcs.pc.traitLimit=Math.floor((Pcs.pc.level||0)/4+1),this.validateTraits()},service.validateTraits=function(){for(var ia=0;ia<Pcs.pc.traitLimit;ia++)this.traitAtLevel(4*ia)||this.addTrait(4*ia);for(var ic=0;ic<Pcs.pc.cards.length;ic++)Pcs.pc.cards[ic].level>Pcs.pc.level&&CardDeck.removeCard(ic)},service.traitAtLevel=function(level){for(var traitAtLevel=!1,ib=0;ib<Pcs.pc.cards.length;ib++)"trait"===Pcs.pc.cards[ib].cardType&&Pcs.pc.cards[ib].level===level&&(traitAtLevel=!0);return traitAtLevel},service.addTrait=function(level){var newTrait={name:"Level "+level+" Trait",cardType:"trait",x_coord:Pcs.pc.cards[Pcs.lastCard()].x_coord+15,y_coord:0,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!1,locked:!0,level:level};Pcs.pc.cards.push(newTrait)},service}]),angular.module("player").factory("Pcs",["$stateParams","$location","Authentication","$resource",function($stateParams,$location,Authentication,$resource){var Pcs=$resource("pcs/:pcId",{pcId:"@_id"},{update:{method:"PUT"}}),service={};return service.pc={},service.lastCard=function(){for(var _last=0,_card={},i=0;i<this.pc.cards.length;i++)this.pc.cards[i].x_coord>(_card.x_coord||0)&&(_last=i,_card=this.pc.cards[i]);return _last},service.deckWidth=function(){return this.pc.cards?this.pc.cards[this.lastCard()].x_coord+15:30},service.pcList=[],service.pcNew=!1,service.pcSaved=!1,service.browsePcs=function(){this.pcList=Pcs.query(function(){})},service.readPc=function(){this.pc=Pcs.get({pcId:$stateParams.pcId})},service.editPc=function(){var pc=this.pc;pc.$update(function(){},function(errorResponse){this.error=errorResponse.data.message})},service.addPc=function(){this.pc=new Pcs({abilities:[{name:"Strength",order:0,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Physique",order:1,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Flexibility",order:2,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Dexterity",order:3,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Acuity",order:4,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Intelligence",order:5,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Wisdom",order:6,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}},{name:"Charisma",order:7,dice:{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0}}],dicepool:[{name:"d__",image:"modules/core/img/d___.png",sides:"0",order:0},{name:"d4",image:"modules/core/img/d_04.png",sides:"4",order:1},{name:"d6",image:"modules/core/img/d_06.png",sides:"6",order:2},{name:"d6",image:"modules/core/img/d_06.png",sides:"6",order:3},{name:"d8",image:"modules/core/img/d_08.png",sides:"8",order:4},{name:"d8",image:"modules/core/img/d_08.png",sides:"8",order:5},{name:"d10",image:"modules/core/img/d_10.png",sides:"10",order:6},{name:"d10",image:"modules/core/img/d_10.png",sides:"10",order:7},{name:"d12",image:"modules/core/img/d_12.png",sides:"12",order:8}],cards:[{cardType:"pc1",deckType:"pc",x_coord:0,y_coord:0,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!1,locked:!0},{cardType:"pc2",deckType:"pc",x_coord:15,y_coord:0,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!1,locked:!0},{cardType:"pc3",deckType:"pc",x_coord:30,y_coord:0,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!1,locked:!0},{name:"Level 0 Trait",cardType:"trait",deckType:"pc",x_coord:45,y_coord:0,x_overlap:!1,y_overlap:!1,dragging:!1,stacked:!1,locked:!0,level:0}]}),this.pc.$save(function(response){$location.path("player/pcs/"+response._id+"/edit")},function(errorResponse){this.error=errorResponse.data.message})},service.deletePc=function(pc){if(pc){pc.$remove();for(var i in this.pcs)this.pcs[i]===pc&&this.pcs.splice(i,1)}else this.pc.$remove(function(){$location.path("player/pcs")});this.browsePcs()},service}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);